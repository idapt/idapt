name: idapt
services:

  # Integrated Ollama instance
  idapt-ollama:
    container_name: idapt-ollama
    image: ollama/ollama:latest
    expose:
      - "11434"
    networks:
      idapt-ollama-external-network: {}
      idapt-ollama-network: {}
    runtime: nvidia
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: ["gpu"]
              count: all
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434"]
      interval: 1s
      timeout: 5s
      retries: 30
    volumes:
      - ollama_data:/root/.ollama
    restart: always
    security_opt:
      - no-new-privileges:true
    #cap_drop: # TODO
    #  - ALL

  idapt-postgres:
    container_name: idapt-postgres
    build:
      context: ./postgres
      dockerfile: ./Dockerfile
    expose:
      - "5432"
    networks:
      idapt-postgres-network: {}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_admin_secrets:/postgres_admin_secrets
      - postgres_backend_secrets:/postgres_backend_secrets
      - postgres_keycloak_secrets:/postgres_keycloak_secrets
    environment:
      POSTGRES_USER: 'postgres'
      POSTGRES_DB: 'postgres'
      POSTGRES_HOST_AUTH_METHOD: 'password'
      PGDATA: '/var/lib/postgresql/data'
    healthcheck:
      test: ["CMD", "pg_isready", "-h", "localhost", "-U", "postgres"]
      interval: 1s
      timeout: 5s
      retries: 30
    restart: always
    security_opt:
      - no-new-privileges:true
    #cap_drop: # TODO
    #  - ALL

  idapt-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: idapt-backend
    expose:
      - "8000"
    networks:
      idapt-backend-external-network: {}
      idapt-backend-network: {}
      idapt-ollama-network: {}
      idapt-postgres-network: {}
    depends_on:
      idapt-postgres:
        condition: service_healthy
      idapt-ollama:
        condition: service_started
      idapt-nginx:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 1s
      timeout: 5s
      retries: 30
    environment:
      ENVIRONMENT: prod
      HOST_DOMAIN: ${HOST_DOMAIN}
    env_file:
      - ./backend/.env
    volumes:
      - backend_data:/backend_data
      - idapt_data:/data
      - postgres_backend_secrets:/postgres_backend_secrets:ro
      - keycloak_backend_client_secret:/keycloak_backend_client_secret
    restart: always
    security_opt:
      - no-new-privileges:true
    #cap_drop: # TODO
    #  - ALL

  idapt-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: idapt-frontend
    expose:
      - "3000"
    networks:
      idapt-frontend-external-network: {}
      idapt-frontend-network: {}
    depends_on:
      idapt-backend:
        condition: service_healthy
    environment:
      ENVIRONMENT: prod
      HOST_DOMAIN: ${HOST_DOMAIN}
    env_file:
      - ./frontend/.env
    restart: always
    user: node
    security_opt:
      - no-new-privileges:true
    #cap_drop: # TODO
    #  - ALL

  idapt-nginx:
    container_name: idapt-nginx
    build:
      context: ./nginx
      dockerfile: ./Dockerfile
    ports:
      - '80:80/tcp'
      - '443:443/tcp'
      - '443:443/udp'
    volumes:
      - './nginx/config:/nginx-config-source:ro'
      - './certs:/nginx-certs-source:ro'
      - './nginx/letsencrypt:/etc/letsencrypt'
      - './nginx/certbot_www:/var/www/certbot'
    networks:
      idapt-nginx-external-network: {}
      idapt-keycloak-network: {}
      idapt-frontend-network: {}
      idapt-backend-network: {}
      idapt-oauth2-proxy-network:
        aliases:
          - "${HOST_DOMAIN}"
    environment:
      HOST_DOMAIN: ${HOST_DOMAIN}
      CERTBOT_EMAIL: ${CERTBOT_EMAIL}
    depends_on:
      idapt-oauth2-proxy:
        condition: service_healthy
      idapt-keycloak:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 1s
      timeout: 5s
      retries: 30
    restart: always
    security_opt:
      - no-new-privileges:true
    #cap_drop: # TODO
    #  - ALL
    #cap_add:
    #  - NET_BIND_SERVICE

  idapt-keycloak:
    container_name: 'idapt-keycloak'
    build:
      context: ./keycloak
      dockerfile: ./Dockerfile
    depends_on:
      idapt-postgres:
        condition: service_healthy
    environment:
      - HOST_DOMAIN=${HOST_DOMAIN}
      - KEYCLOAK_USER_EMAIL=${KEYCLOAK_USER_EMAIL}
      - SMTP_ADDRESS=${SMTP_ADDRESS}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_SSL=${SMTP_SSL}
      - SMTP_STARTTLS=${SMTP_STARTTLS}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - KC_HEALTH_ENABLED=true
    volumes:
      - 'postgres_keycloak_secrets:/postgres_keycloak_secrets'
      - 'keycloak_oauth2_client_secret:/keycloak_oauth2_client_secret'
      - 'keycloak_backend_client_secret:/keycloak_backend_client_secret'
      - 'keycloak_initialized:/keycloak_initialized'
    networks:
      idapt-keycloak-external-network: {}
      idapt-keycloak-network: {}
      idapt-postgres-network: {}
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/9000 && echo -e 'GET /auth/health/ready HTTP/1.1\r\nhost: localhost\r\nConnection: close\r\n\r\n' >&3 && cat <&3 | grep -q 'UP'"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: always
    security_opt:
      - no-new-privileges:true
    #cap_drop: # TODO
    #  - ALL

  idapt-oauth2-proxy:
    container_name: idapt-oauth2-proxy
    build:
      context: ./oauth2
      dockerfile: ./Dockerfile
    environment:
      - HOST_DOMAIN=${HOST_DOMAIN}
    expose:
      - "4180"
    volumes:
      - keycloak_oauth2_client_secret:/keycloak_oauth2_client_secret
      - oauth2_cookie_secret:/oauth2_cookie_secret
    networks:
      idapt-oauth2-proxy-network: {}
    restart: always

volumes:
  backend_data:
  idapt_data:
  ollama_data:
  postgres_data:
  postgres_admin_secrets:
  postgres_backend_secrets:
  postgres_keycloak_secrets:
  letsencrypt:
  certbot_www:
  keycloak_oauth2_client_secret:
  keycloak_backend_client_secret:
  keycloak_initialized:
  oauth2_cookie_secret:

networks:
  # Dedicated external networks for services that need internet access
  idapt-nginx-external-network:
    attachable: false
    name: idapt-nginx-external-network
    driver: bridge
  idapt-frontend-external-network:
    attachable: false
    name: idapt-frontend-external-network
    driver: bridge
  idapt-backend-external-network:
    attachable: false
    name: idapt-backend-external-network
    driver: bridge
  idapt-keycloak-external-network:
    attachable: false
    name: idapt-keycloak-external-network
    driver: bridge
  idapt-ollama-external-network:
    attachable: false
    name: idapt-ollama-external-network
    driver: bridge
  # Internal networks for inter container communication.
  idapt-backend-network:
    internal: true
    attachable: false
    name: idapt-backend-network
    driver: bridge
  idapt-frontend-network:
    internal: true
    attachable: false
    name: idapt-frontend-network
    driver: bridge
  idapt-ollama-network:
    internal: true
    attachable: false
    name: idapt-ollama-network
    driver: bridge
  idapt-postgres-network:
    internal: true
    attachable: false
    name: idapt-postgres-network
    driver: bridge
  idapt-keycloak-network:
    internal: true
    attachable: false
    name: idapt-keycloak-network
    driver: bridge
  idapt-oauth2-proxy-network:
    internal: true
    attachable: false
    name: idapt-oauth2-proxy-network
    driver: bridge
