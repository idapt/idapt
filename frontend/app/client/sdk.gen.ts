// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-fetch';
import type { ChatRouteApiChatPostData, ChatRouteApiChatPostError, ChatRequestRouteApiChatRequestPostData, ChatRequestRouteApiChatRequestPostResponse, ChatRequestRouteApiChatRequestPostError, ChatConfigRouteApiChatConfigGetData, ChatConfigRouteApiChatConfigGetResponse, UploadFileRouteApiChatUploadPostData, UploadFileRouteApiChatUploadPostResponse, UploadFileRouteApiChatUploadPostError, DeleteSettingRouteApiSettingsIdentifierDeleteData, DeleteSettingRouteApiSettingsIdentifierDeleteError, GetSettingRouteApiSettingsIdentifierGetData, GetSettingRouteApiSettingsIdentifierGetResponse, GetSettingRouteApiSettingsIdentifierGetError, UpdateSettingRouteApiSettingsIdentifierPatchData, UpdateSettingRouteApiSettingsIdentifierPatchError, CreateSettingRouteApiSettingsIdentifierPostData, CreateSettingRouteApiSettingsIdentifierPostError, GetAllSettingsRouteApiSettingsGetData, GetAllSettingsRouteApiSettingsGetResponse, GetAllSettingsRouteApiSettingsGetError, UploadFileRouteApiFileManagerUploadFilePostData, UploadFileRouteApiFileManagerUploadFilePostResponse, UploadFileRouteApiFileManagerUploadFilePostError, DeleteRouteApiFileManagerEncodedOriginalPathDeleteData, DeleteRouteApiFileManagerEncodedOriginalPathDeleteError, GetFolderInfoRouteApiFileManagerFolderEncodedOriginalPathGetData, GetFolderInfoRouteApiFileManagerFolderEncodedOriginalPathGetResponse, GetFolderInfoRouteApiFileManagerFolderEncodedOriginalPathGetError, GetFileInfoRouteApiFileManagerFileEncodedOriginalPathGetData, GetFileInfoRouteApiFileManagerFileEncodedOriginalPathGetResponse, GetFileInfoRouteApiFileManagerFileEncodedOriginalPathGetError, DownloadFileRouteApiFileManagerFileEncodedOriginalPathDownloadGetData, DownloadFileRouteApiFileManagerFileEncodedOriginalPathDownloadGetError, DownloadFolderRouteApiFileManagerFolderEncodedOriginalPathDownloadGetData, DownloadFolderRouteApiFileManagerFolderEncodedOriginalPathDownloadGetError, DeleteProcessedDataRouteApiFileManagerProcessedDataEncodedOriginalPathDeleteData, DeleteProcessedDataRouteApiFileManagerProcessedDataEncodedOriginalPathDeleteError, GetDatasourcesRouteApiDatasourcesGetData, GetDatasourcesRouteApiDatasourcesGetResponse, GetDatasourcesRouteApiDatasourcesGetError, CreateDatasourceRouteApiDatasourcesPostData, CreateDatasourceRouteApiDatasourcesPostError, DeleteDatasourceRouteApiDatasourcesIdentifierDeleteData, DeleteDatasourceRouteApiDatasourcesIdentifierDeleteError, GetDatasourceRouteApiDatasourcesIdentifierGetData, GetDatasourceRouteApiDatasourcesIdentifierGetResponse, GetDatasourceRouteApiDatasourcesIdentifierGetError, UpdateDatasourceRouteApiDatasourcesIdentifierPatchData, UpdateDatasourceRouteApiDatasourcesIdentifierPatchError, ProcessingRouteApiProcessingPostData, ProcessingRouteApiProcessingPostResponse, ProcessingRouteApiProcessingPostError, GetProcessingStatusRouteApiProcessingStatusGetData, GetProcessingStatusRouteApiProcessingStatusGetResponse, GetProcessingStatusRouteApiProcessingStatusGetError, GetProcessingStepsRouteApiStacksStepsGetData, GetProcessingStepsRouteApiStacksStepsGetResponse, GetProcessingStepsRouteApiStacksStepsGetError, GetProcessingStacksRouteApiStacksStacksGetData, GetProcessingStacksRouteApiStacksStacksGetResponse, GetProcessingStacksRouteApiStacksStacksGetError, CreateProcessingStackRouteApiStacksStacksPostData, CreateProcessingStackRouteApiStacksStacksPostResponse, CreateProcessingStackRouteApiStacksStacksPostError, DeleteProcessingStackRouteApiStacksStacksStackIdentifierDeleteData, DeleteProcessingStackRouteApiStacksStacksStackIdentifierDeleteError, GetProcessingStackRouteApiStacksStacksStackIdentifierGetData, GetProcessingStackRouteApiStacksStacksStackIdentifierGetResponse, GetProcessingStackRouteApiStacksStacksStackIdentifierGetError, UpdateProcessingStackRouteApiStacksStacksStackIdentifierPutData, UpdateProcessingStackRouteApiStacksStacksStackIdentifierPutResponse, UpdateProcessingStackRouteApiStacksStacksStackIdentifierPutError, GetOllamaStatusRouteApiOllamaStatusGetData, GetOllamaStatusRouteApiOllamaStatusGetResponse, GetOllamaStatusRouteApiOllamaStatusGetError, HealthRouteApiHealthGetData, HealthRouteApiHealthGetResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

/**
 * Chat Route
 */
export const chatRouteApiChatPost = <ThrowOnError extends boolean = false>(options: Options<ChatRouteApiChatPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, ChatRouteApiChatPostError, ThrowOnError>({
        url: '/api/chat',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Chat Request Route
 */
export const chatRequestRouteApiChatRequestPost = <ThrowOnError extends boolean = false>(options: Options<ChatRequestRouteApiChatRequestPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ChatRequestRouteApiChatRequestPostResponse, ChatRequestRouteApiChatRequestPostError, ThrowOnError>({
        url: '/api/chat/request',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Chat Config Route
 */
export const chatConfigRouteApiChatConfigGet = <ThrowOnError extends boolean = false>(options?: Options<ChatConfigRouteApiChatConfigGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ChatConfigRouteApiChatConfigGetResponse, unknown, ThrowOnError>({
        url: '/api/chat/config',
        ...options
    });
};

/**
 * Upload File Route
 * To upload a private file from the chat UI.
 */
export const uploadFileRouteApiChatUploadPost = <ThrowOnError extends boolean = false>(options: Options<UploadFileRouteApiChatUploadPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UploadFileRouteApiChatUploadPostResponse, UploadFileRouteApiChatUploadPostError, ThrowOnError>({
        url: '/api/chat/upload',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Setting Route
 */
export const deleteSettingRouteApiSettingsIdentifierDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteSettingRouteApiSettingsIdentifierDeleteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, DeleteSettingRouteApiSettingsIdentifierDeleteError, ThrowOnError>({
        url: '/api/settings/{identifier}',
        ...options
    });
};

/**
 * Get Setting Route
 */
export const getSettingRouteApiSettingsIdentifierGet = <ThrowOnError extends boolean = false>(options: Options<GetSettingRouteApiSettingsIdentifierGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSettingRouteApiSettingsIdentifierGetResponse, GetSettingRouteApiSettingsIdentifierGetError, ThrowOnError>({
        url: '/api/settings/{identifier}',
        ...options
    });
};

/**
 * Update Setting Route
 */
export const updateSettingRouteApiSettingsIdentifierPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateSettingRouteApiSettingsIdentifierPatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).patch<unknown, UpdateSettingRouteApiSettingsIdentifierPatchError, ThrowOnError>({
        url: '/api/settings/{identifier}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create Setting Route
 */
export const createSettingRouteApiSettingsIdentifierPost = <ThrowOnError extends boolean = false>(options: Options<CreateSettingRouteApiSettingsIdentifierPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, CreateSettingRouteApiSettingsIdentifierPostError, ThrowOnError>({
        url: '/api/settings/{identifier}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get All Settings Route
 */
export const getAllSettingsRouteApiSettingsGet = <ThrowOnError extends boolean = false>(options: Options<GetAllSettingsRouteApiSettingsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllSettingsRouteApiSettingsGetResponse, GetAllSettingsRouteApiSettingsGetError, ThrowOnError>({
        url: '/api/settings',
        ...options
    });
};

/**
 * Upload file
 */
export const uploadFileRouteApiFileManagerUploadFilePost = <ThrowOnError extends boolean = false>(options: Options<UploadFileRouteApiFileManagerUploadFilePostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UploadFileRouteApiFileManagerUploadFilePostResponse, UploadFileRouteApiFileManagerUploadFilePostError, ThrowOnError>({
        url: '/api/file-manager/upload-file',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Route
 */
export const deleteRouteApiFileManagerEncodedOriginalPathDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteRouteApiFileManagerEncodedOriginalPathDeleteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, DeleteRouteApiFileManagerEncodedOriginalPathDeleteError, ThrowOnError>({
        url: '/api/file-manager/{encoded_original_path}',
        ...options
    });
};

/**
 * Get folder contents
 * Get contents of a folder
 */
export const getFolderInfoRouteApiFileManagerFolderEncodedOriginalPathGet = <ThrowOnError extends boolean = false>(options: Options<GetFolderInfoRouteApiFileManagerFolderEncodedOriginalPathGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetFolderInfoRouteApiFileManagerFolderEncodedOriginalPathGetResponse, GetFolderInfoRouteApiFileManagerFolderEncodedOriginalPathGetError, ThrowOnError>({
        url: '/api/file-manager/folder/{encoded_original_path}',
        ...options
    });
};

/**
 * Get file info
 */
export const getFileInfoRouteApiFileManagerFileEncodedOriginalPathGet = <ThrowOnError extends boolean = false>(options: Options<GetFileInfoRouteApiFileManagerFileEncodedOriginalPathGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetFileInfoRouteApiFileManagerFileEncodedOriginalPathGetResponse, GetFileInfoRouteApiFileManagerFileEncodedOriginalPathGetError, ThrowOnError>({
        url: '/api/file-manager/file/{encoded_original_path}',
        ...options
    });
};

/**
 * Download file
 */
export const downloadFileRouteApiFileManagerFileEncodedOriginalPathDownloadGet = <ThrowOnError extends boolean = false>(options: Options<DownloadFileRouteApiFileManagerFileEncodedOriginalPathDownloadGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, DownloadFileRouteApiFileManagerFileEncodedOriginalPathDownloadGetError, ThrowOnError>({
        url: '/api/file-manager/file/{encoded_original_path}/download',
        ...options
    });
};

/**
 * Download Folder Route
 */
export const downloadFolderRouteApiFileManagerFolderEncodedOriginalPathDownloadGet = <ThrowOnError extends boolean = false>(options: Options<DownloadFolderRouteApiFileManagerFolderEncodedOriginalPathDownloadGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, DownloadFolderRouteApiFileManagerFolderEncodedOriginalPathDownloadGetError, ThrowOnError>({
        url: '/api/file-manager/folder/{encoded_original_path}/download',
        ...options
    });
};

/**
 * Delete Processed Data Route
 */
export const deleteProcessedDataRouteApiFileManagerProcessedDataEncodedOriginalPathDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteProcessedDataRouteApiFileManagerProcessedDataEncodedOriginalPathDeleteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, DeleteProcessedDataRouteApiFileManagerProcessedDataEncodedOriginalPathDeleteError, ThrowOnError>({
        url: '/api/file-manager/processed-data/{encoded_original_path}',
        ...options
    });
};

/**
 * Get Datasources Route
 */
export const getDatasourcesRouteApiDatasourcesGet = <ThrowOnError extends boolean = false>(options: Options<GetDatasourcesRouteApiDatasourcesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDatasourcesRouteApiDatasourcesGetResponse, GetDatasourcesRouteApiDatasourcesGetError, ThrowOnError>({
        url: '/api/datasources',
        ...options
    });
};

/**
 * Create Datasource Route
 */
export const createDatasourceRouteApiDatasourcesPost = <ThrowOnError extends boolean = false>(options: Options<CreateDatasourceRouteApiDatasourcesPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, CreateDatasourceRouteApiDatasourcesPostError, ThrowOnError>({
        url: '/api/datasources',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Datasource Route
 */
export const deleteDatasourceRouteApiDatasourcesIdentifierDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteDatasourceRouteApiDatasourcesIdentifierDeleteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, DeleteDatasourceRouteApiDatasourcesIdentifierDeleteError, ThrowOnError>({
        url: '/api/datasources/{identifier}',
        ...options
    });
};

/**
 * Get Datasource Route
 */
export const getDatasourceRouteApiDatasourcesIdentifierGet = <ThrowOnError extends boolean = false>(options: Options<GetDatasourceRouteApiDatasourcesIdentifierGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDatasourceRouteApiDatasourcesIdentifierGetResponse, GetDatasourceRouteApiDatasourcesIdentifierGetError, ThrowOnError>({
        url: '/api/datasources/{identifier}',
        ...options
    });
};

/**
 * Update Datasource Route
 */
export const updateDatasourceRouteApiDatasourcesIdentifierPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateDatasourceRouteApiDatasourcesIdentifierPatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).patch<unknown, UpdateDatasourceRouteApiDatasourcesIdentifierPatchError, ThrowOnError>({
        url: '/api/datasources/{identifier}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Processing Route
 * Add files or folders to generation queue and start processing if needed
 */
export const processingRouteApiProcessingPost = <ThrowOnError extends boolean = false>(options: Options<ProcessingRouteApiProcessingPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ProcessingRouteApiProcessingPostResponse, ProcessingRouteApiProcessingPostError, ThrowOnError>({
        url: '/api/processing',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Processing Status Route
 * Get the current status of the generation queue
 */
export const getProcessingStatusRouteApiProcessingStatusGet = <ThrowOnError extends boolean = false>(options: Options<GetProcessingStatusRouteApiProcessingStatusGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetProcessingStatusRouteApiProcessingStatusGetResponse, GetProcessingStatusRouteApiProcessingStatusGetError, ThrowOnError>({
        url: '/api/processing/status',
        ...options
    });
};

/**
 * Get Processing Steps Route
 */
export const getProcessingStepsRouteApiStacksStepsGet = <ThrowOnError extends boolean = false>(options: Options<GetProcessingStepsRouteApiStacksStepsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetProcessingStepsRouteApiStacksStepsGetResponse, GetProcessingStepsRouteApiStacksStepsGetError, ThrowOnError>({
        url: '/api/stacks/steps',
        ...options
    });
};

/**
 * Get Processing Stacks Route
 */
export const getProcessingStacksRouteApiStacksStacksGet = <ThrowOnError extends boolean = false>(options: Options<GetProcessingStacksRouteApiStacksStacksGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetProcessingStacksRouteApiStacksStacksGetResponse, GetProcessingStacksRouteApiStacksStacksGetError, ThrowOnError>({
        url: '/api/stacks/stacks',
        ...options
    });
};

/**
 * Create Processing Stack Route
 */
export const createProcessingStackRouteApiStacksStacksPost = <ThrowOnError extends boolean = false>(options: Options<CreateProcessingStackRouteApiStacksStacksPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateProcessingStackRouteApiStacksStacksPostResponse, CreateProcessingStackRouteApiStacksStacksPostError, ThrowOnError>({
        url: '/api/stacks/stacks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Processing Stack Route
 */
export const deleteProcessingStackRouteApiStacksStacksStackIdentifierDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteProcessingStackRouteApiStacksStacksStackIdentifierDeleteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, DeleteProcessingStackRouteApiStacksStacksStackIdentifierDeleteError, ThrowOnError>({
        url: '/api/stacks/stacks/{stack_identifier}',
        ...options
    });
};

/**
 * Get Processing Stack Route
 */
export const getProcessingStackRouteApiStacksStacksStackIdentifierGet = <ThrowOnError extends boolean = false>(options: Options<GetProcessingStackRouteApiStacksStacksStackIdentifierGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetProcessingStackRouteApiStacksStacksStackIdentifierGetResponse, GetProcessingStackRouteApiStacksStacksStackIdentifierGetError, ThrowOnError>({
        url: '/api/stacks/stacks/{stack_identifier}',
        ...options
    });
};

/**
 * Update Processing Stack Route
 */
export const updateProcessingStackRouteApiStacksStacksStackIdentifierPut = <ThrowOnError extends boolean = false>(options: Options<UpdateProcessingStackRouteApiStacksStacksStackIdentifierPutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<UpdateProcessingStackRouteApiStacksStacksStackIdentifierPutResponse, UpdateProcessingStackRouteApiStacksStacksStackIdentifierPutError, ThrowOnError>({
        url: '/api/stacks/stacks/{stack_identifier}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Ollama Status Route
 * Get the current status of Ollama model downloads
 */
export const getOllamaStatusRouteApiOllamaStatusGet = <ThrowOnError extends boolean = false>(options: Options<GetOllamaStatusRouteApiOllamaStatusGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetOllamaStatusRouteApiOllamaStatusGetResponse, GetOllamaStatusRouteApiOllamaStatusGetError, ThrowOnError>({
        url: '/api/ollama-status',
        ...options
    });
};

/**
 * Health Route
 */
export const healthRouteApiHealthGet = <ThrowOnError extends boolean = false>(options?: Options<HealthRouteApiHealthGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HealthRouteApiHealthGetResponse, unknown, ThrowOnError>({
        url: '/api/health',
        ...options
    });
};