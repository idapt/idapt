// This file is auto-generated by @hey-api/openapi-ts

import { type Options, urlSearchParamsBodySerializer } from '@hey-api/client-fetch';
import type { LoginForAccessSkTokenRouteApiAuthTokenPostData, LoginForAccessSkTokenRouteApiAuthTokenPostResponse, LoginForAccessSkTokenRouteApiAuthTokenPostError, RegisterRouteApiAuthRegisterPostData, RegisterRouteApiAuthRegisterPostResponse, RegisterRouteApiAuthRegisterPostError, DeleteUserRouteApiAuthDeleteDeleteData, DeleteUserRouteApiAuthDeleteDeleteResponse, DeleteUserRouteApiAuthDeleteDeleteError, ReadKeyringRouteApiAuthKeyringGetData, ReadKeyringRouteApiAuthKeyringGetResponse, ChatStreamingRouteApiChatPostData, ChatStreamingRouteApiChatPostError, ChatRequestRouteApiChatRequestPostData, ChatRequestRouteApiChatRequestPostResponse, ChatRequestRouteApiChatRequestPostError, DeleteSettingRouteApiSettingsIdentifierDeleteData, DeleteSettingRouteApiSettingsIdentifierDeleteError, GetSettingRouteApiSettingsIdentifierGetData, GetSettingRouteApiSettingsIdentifierGetResponse, GetSettingRouteApiSettingsIdentifierGetError, UpdateSettingRouteApiSettingsIdentifierPatchData, UpdateSettingRouteApiSettingsIdentifierPatchError, CreateSettingRouteApiSettingsIdentifierPostData, CreateSettingRouteApiSettingsIdentifierPostError, GetAllSettingsRouteApiSettingsGetData, GetAllSettingsRouteApiSettingsGetResponse, GetAllSettingsWithSchemaIdentifierRouteApiSettingsSchemaSchemaIdentifierGetData, GetAllSettingsWithSchemaIdentifierRouteApiSettingsSchemaSchemaIdentifierGetResponse, GetAllSettingsWithSchemaIdentifierRouteApiSettingsSchemaSchemaIdentifierGetError, UploadFileRouteApiDatasourcesDatasourceNameFileManagerUploadFilePostData, UploadFileRouteApiDatasourcesDatasourceNameFileManagerUploadFilePostResponse, UploadFileRouteApiDatasourcesDatasourceNameFileManagerUploadFilePostError, DeleteRouteApiDatasourcesDatasourceNameFileManagerEncodedOriginalPathDeleteData, DeleteRouteApiDatasourcesDatasourceNameFileManagerEncodedOriginalPathDeleteError, GetFolderInfoRouteApiDatasourcesDatasourceNameFileManagerFolderEncodedOriginalPathGetData, GetFolderInfoRouteApiDatasourcesDatasourceNameFileManagerFolderEncodedOriginalPathGetResponse, GetFolderInfoRouteApiDatasourcesDatasourceNameFileManagerFolderEncodedOriginalPathGetError, GetFileInfoRouteApiDatasourcesDatasourceNameFileManagerFileEncodedOriginalPathGetData, GetFileInfoRouteApiDatasourcesDatasourceNameFileManagerFileEncodedOriginalPathGetResponse, GetFileInfoRouteApiDatasourcesDatasourceNameFileManagerFileEncodedOriginalPathGetError, DownloadFileRouteApiDatasourcesDatasourceNameFileManagerFileEncodedOriginalPathDownloadGetData, DownloadFileRouteApiDatasourcesDatasourceNameFileManagerFileEncodedOriginalPathDownloadGetError, DownloadFolderRouteApiDatasourcesDatasourceNameFileManagerFolderEncodedOriginalPathDownloadGetData, DownloadFolderRouteApiDatasourcesDatasourceNameFileManagerFolderEncodedOriginalPathDownloadGetError, DeleteProcessedDataRouteApiDatasourcesDatasourceNameFileManagerProcessedDataEncodedOriginalPathDeleteData, DeleteProcessedDataRouteApiDatasourcesDatasourceNameFileManagerProcessedDataEncodedOriginalPathDeleteError, GetAllChatsRouteApiDatasourcesDatasourceNameChatsGetData, GetAllChatsRouteApiDatasourcesDatasourceNameChatsGetResponse, GetAllChatsRouteApiDatasourcesDatasourceNameChatsGetError, CreateChatRouteApiDatasourcesDatasourceNameChatsPostData, CreateChatRouteApiDatasourcesDatasourceNameChatsPostResponse, CreateChatRouteApiDatasourcesDatasourceNameChatsPostError, DeleteChatRouteApiDatasourcesDatasourceNameChatsChatUuidDeleteData, DeleteChatRouteApiDatasourcesDatasourceNameChatsChatUuidDeleteError, GetChatRouteApiDatasourcesDatasourceNameChatsChatUuidGetData, GetChatRouteApiDatasourcesDatasourceNameChatsChatUuidGetResponse, GetChatRouteApiDatasourcesDatasourceNameChatsChatUuidGetError, UpdateChatTitleRouteApiDatasourcesDatasourceNameChatsChatUuidPutData, UpdateChatTitleRouteApiDatasourcesDatasourceNameChatsChatUuidPutError, AddMessageToChatRouteApiDatasourcesDatasourceNameChatsChatUuidMessagesPostData, AddMessageToChatRouteApiDatasourcesDatasourceNameChatsChatUuidMessagesPostError, GetAllDatasourcesRouteApiDatasourcesGetData, GetAllDatasourcesRouteApiDatasourcesGetResponse, DeleteDatasourceRouteApiDatasourcesDatasourceNameDeleteData, DeleteDatasourceRouteApiDatasourcesDatasourceNameDeleteError, GetDatasourceRouteApiDatasourcesDatasourceNameGetData, GetDatasourceRouteApiDatasourcesDatasourceNameGetResponse, GetDatasourceRouteApiDatasourcesDatasourceNameGetError, UpdateDatasourceRouteApiDatasourcesDatasourceNamePatchData, UpdateDatasourceRouteApiDatasourcesDatasourceNamePatchError, CreateDatasourceRouteApiDatasourcesDatasourceNamePostData, CreateDatasourceRouteApiDatasourcesDatasourceNamePostError, ProcessingRouteApiProcessingPostData, ProcessingRouteApiProcessingPostResponse, ProcessingRouteApiProcessingPostError, GetProcessingStatusRouteApiProcessingStatusGetData, GetProcessingStatusRouteApiProcessingStatusGetResponse, GetProcessingStepsRouteApiStacksStepsGetData, GetProcessingStepsRouteApiStacksStepsGetResponse, GetProcessingStacksRouteApiStacksStacksGetData, GetProcessingStacksRouteApiStacksStacksGetResponse, CreateProcessingStackRouteApiStacksStacksPostData, CreateProcessingStackRouteApiStacksStacksPostResponse, CreateProcessingStackRouteApiStacksStacksPostError, DeleteProcessingStackRouteApiStacksStacksStackIdentifierDeleteData, DeleteProcessingStackRouteApiStacksStacksStackIdentifierDeleteError, GetProcessingStackRouteApiStacksStacksStackIdentifierGetData, GetProcessingStackRouteApiStacksStacksStackIdentifierGetResponse, GetProcessingStackRouteApiStacksStacksStackIdentifierGetError, UpdateProcessingStackRouteApiStacksStacksStackIdentifierPutData, UpdateProcessingStackRouteApiStacksStacksStackIdentifierPutResponse, UpdateProcessingStackRouteApiStacksStacksStackIdentifierPutError, GetOllamaStatusRouteApiOllamaStatusGetData, GetOllamaStatusRouteApiOllamaStatusGetResponse, HealthRouteApiHealthGetData, HealthRouteApiHealthGetResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

/**
 * Login For Access Sk Token Route
 * Login with user password to get an access token
 */
export const loginForAccessSkTokenRouteApiAuthTokenPost = <ThrowOnError extends boolean = false>(options: Options<LoginForAccessSkTokenRouteApiAuthTokenPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<LoginForAccessSkTokenRouteApiAuthTokenPostResponse, LoginForAccessSkTokenRouteApiAuthTokenPostError, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/api/auth/token',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Register Route
 * Register a new user
 */
export const registerRouteApiAuthRegisterPost = <ThrowOnError extends boolean = false>(options: Options<RegisterRouteApiAuthRegisterPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RegisterRouteApiAuthRegisterPostResponse, RegisterRouteApiAuthRegisterPostError, ThrowOnError>({
        url: '/api/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete User Route
 * Delete a registered user
 * Will not ask for confirmation, be careful with this endpoint
 */
export const deleteUserRouteApiAuthDeleteDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteUserRouteApiAuthDeleteDeleteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteUserRouteApiAuthDeleteDeleteResponse, DeleteUserRouteApiAuthDeleteDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/auth/delete',
        ...options
    });
};

/**
 * Read Keyring Route
 * Read the keyring of the authenticated user directly
 */
export const readKeyringRouteApiAuthKeyringGet = <ThrowOnError extends boolean = false>(options?: Options<ReadKeyringRouteApiAuthKeyringGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadKeyringRouteApiAuthKeyringGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/auth/keyring',
        ...options
    });
};

/**
 * Chat Streaming Route
 * Streaming endpoint for chat requests.
 * Returns a stream of messages from the agent.
 */
export const chatStreamingRouteApiChatPost = <ThrowOnError extends boolean = false>(options: Options<ChatStreamingRouteApiChatPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, ChatStreamingRouteApiChatPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/chat',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Chat Request Route
 * Non-streaming endpoint for chat requests.
 * Returns a single message from the agent.
 */
export const chatRequestRouteApiChatRequestPost = <ThrowOnError extends boolean = false>(options: Options<ChatRequestRouteApiChatRequestPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ChatRequestRouteApiChatRequestPostResponse, ChatRequestRouteApiChatRequestPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/chat/request',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Setting Route
 */
export const deleteSettingRouteApiSettingsIdentifierDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteSettingRouteApiSettingsIdentifierDeleteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, DeleteSettingRouteApiSettingsIdentifierDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/settings/{identifier}',
        ...options
    });
};

/**
 * Get Setting Route
 */
export const getSettingRouteApiSettingsIdentifierGet = <ThrowOnError extends boolean = false>(options: Options<GetSettingRouteApiSettingsIdentifierGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSettingRouteApiSettingsIdentifierGetResponse, GetSettingRouteApiSettingsIdentifierGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/settings/{identifier}',
        ...options
    });
};

/**
 * Update Setting Route
 */
export const updateSettingRouteApiSettingsIdentifierPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateSettingRouteApiSettingsIdentifierPatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).patch<unknown, UpdateSettingRouteApiSettingsIdentifierPatchError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/settings/{identifier}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create Setting Route
 */
export const createSettingRouteApiSettingsIdentifierPost = <ThrowOnError extends boolean = false>(options: Options<CreateSettingRouteApiSettingsIdentifierPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, CreateSettingRouteApiSettingsIdentifierPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/settings/{identifier}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get All Settings Route
 */
export const getAllSettingsRouteApiSettingsGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllSettingsRouteApiSettingsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllSettingsRouteApiSettingsGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/settings',
        ...options
    });
};

/**
 * Get All Settings With Schema Identifier Route
 */
export const getAllSettingsWithSchemaIdentifierRouteApiSettingsSchemaSchemaIdentifierGet = <ThrowOnError extends boolean = false>(options: Options<GetAllSettingsWithSchemaIdentifierRouteApiSettingsSchemaSchemaIdentifierGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllSettingsWithSchemaIdentifierRouteApiSettingsSchemaSchemaIdentifierGetResponse, GetAllSettingsWithSchemaIdentifierRouteApiSettingsSchemaSchemaIdentifierGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/settings/schema/{schema_identifier}',
        ...options
    });
};

/**
 * Upload file
 */
export const uploadFileRouteApiDatasourcesDatasourceNameFileManagerUploadFilePost = <ThrowOnError extends boolean = false>(options: Options<UploadFileRouteApiDatasourcesDatasourceNameFileManagerUploadFilePostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UploadFileRouteApiDatasourcesDatasourceNameFileManagerUploadFilePostResponse, UploadFileRouteApiDatasourcesDatasourceNameFileManagerUploadFilePostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/datasources/{datasource_name}/file-manager/upload-file',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Route
 */
export const deleteRouteApiDatasourcesDatasourceNameFileManagerEncodedOriginalPathDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteRouteApiDatasourcesDatasourceNameFileManagerEncodedOriginalPathDeleteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, DeleteRouteApiDatasourcesDatasourceNameFileManagerEncodedOriginalPathDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/datasources/{datasource_name}/file-manager/{encoded_original_path}',
        ...options
    });
};

/**
 * Get folder contents
 * Get contents of a folder
 */
export const getFolderInfoRouteApiDatasourcesDatasourceNameFileManagerFolderEncodedOriginalPathGet = <ThrowOnError extends boolean = false>(options: Options<GetFolderInfoRouteApiDatasourcesDatasourceNameFileManagerFolderEncodedOriginalPathGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetFolderInfoRouteApiDatasourcesDatasourceNameFileManagerFolderEncodedOriginalPathGetResponse, GetFolderInfoRouteApiDatasourcesDatasourceNameFileManagerFolderEncodedOriginalPathGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/datasources/{datasource_name}/file-manager/folder/{encoded_original_path}',
        ...options
    });
};

/**
 * Get file info
 */
export const getFileInfoRouteApiDatasourcesDatasourceNameFileManagerFileEncodedOriginalPathGet = <ThrowOnError extends boolean = false>(options: Options<GetFileInfoRouteApiDatasourcesDatasourceNameFileManagerFileEncodedOriginalPathGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetFileInfoRouteApiDatasourcesDatasourceNameFileManagerFileEncodedOriginalPathGetResponse, GetFileInfoRouteApiDatasourcesDatasourceNameFileManagerFileEncodedOriginalPathGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/datasources/{datasource_name}/file-manager/file/{encoded_original_path}',
        ...options
    });
};

/**
 * Download file
 */
export const downloadFileRouteApiDatasourcesDatasourceNameFileManagerFileEncodedOriginalPathDownloadGet = <ThrowOnError extends boolean = false>(options: Options<DownloadFileRouteApiDatasourcesDatasourceNameFileManagerFileEncodedOriginalPathDownloadGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, DownloadFileRouteApiDatasourcesDatasourceNameFileManagerFileEncodedOriginalPathDownloadGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/datasources/{datasource_name}/file-manager/file/{encoded_original_path}/download',
        ...options
    });
};

/**
 * Download Folder Route
 */
export const downloadFolderRouteApiDatasourcesDatasourceNameFileManagerFolderEncodedOriginalPathDownloadGet = <ThrowOnError extends boolean = false>(options: Options<DownloadFolderRouteApiDatasourcesDatasourceNameFileManagerFolderEncodedOriginalPathDownloadGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, DownloadFolderRouteApiDatasourcesDatasourceNameFileManagerFolderEncodedOriginalPathDownloadGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/datasources/{datasource_name}/file-manager/folder/{encoded_original_path}/download',
        ...options
    });
};

/**
 * Delete Processed Data Route
 */
export const deleteProcessedDataRouteApiDatasourcesDatasourceNameFileManagerProcessedDataEncodedOriginalPathDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteProcessedDataRouteApiDatasourcesDatasourceNameFileManagerProcessedDataEncodedOriginalPathDeleteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, DeleteProcessedDataRouteApiDatasourcesDatasourceNameFileManagerProcessedDataEncodedOriginalPathDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/datasources/{datasource_name}/file-manager/processed-data/{encoded_original_path}',
        ...options
    });
};

/**
 * Get all chats
 */
export const getAllChatsRouteApiDatasourcesDatasourceNameChatsGet = <ThrowOnError extends boolean = false>(options: Options<GetAllChatsRouteApiDatasourcesDatasourceNameChatsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllChatsRouteApiDatasourcesDatasourceNameChatsGetResponse, GetAllChatsRouteApiDatasourcesDatasourceNameChatsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/datasources/{datasource_name}/chats',
        ...options
    });
};

/**
 * Create a chat
 */
export const createChatRouteApiDatasourcesDatasourceNameChatsPost = <ThrowOnError extends boolean = false>(options: Options<CreateChatRouteApiDatasourcesDatasourceNameChatsPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateChatRouteApiDatasourcesDatasourceNameChatsPostResponse, CreateChatRouteApiDatasourcesDatasourceNameChatsPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/datasources/{datasource_name}/chats',
        ...options
    });
};

/**
 * Delete a chat
 */
export const deleteChatRouteApiDatasourcesDatasourceNameChatsChatUuidDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteChatRouteApiDatasourcesDatasourceNameChatsChatUuidDeleteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, DeleteChatRouteApiDatasourcesDatasourceNameChatsChatUuidDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/datasources/{datasource_name}/chats/{chat_uuid}',
        ...options
    });
};

/**
 * Get a chat
 */
export const getChatRouteApiDatasourcesDatasourceNameChatsChatUuidGet = <ThrowOnError extends boolean = false>(options: Options<GetChatRouteApiDatasourcesDatasourceNameChatsChatUuidGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetChatRouteApiDatasourcesDatasourceNameChatsChatUuidGetResponse, GetChatRouteApiDatasourcesDatasourceNameChatsChatUuidGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/datasources/{datasource_name}/chats/{chat_uuid}',
        ...options
    });
};

/**
 * Update a chat title
 */
export const updateChatTitleRouteApiDatasourcesDatasourceNameChatsChatUuidPut = <ThrowOnError extends boolean = false>(options: Options<UpdateChatTitleRouteApiDatasourcesDatasourceNameChatsChatUuidPutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<unknown, UpdateChatTitleRouteApiDatasourcesDatasourceNameChatsChatUuidPutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/datasources/{datasource_name}/chats/{chat_uuid}',
        ...options
    });
};

/**
 * Add a message to a chat
 */
export const addMessageToChatRouteApiDatasourcesDatasourceNameChatsChatUuidMessagesPost = <ThrowOnError extends boolean = false>(options: Options<AddMessageToChatRouteApiDatasourcesDatasourceNameChatsChatUuidMessagesPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, AddMessageToChatRouteApiDatasourcesDatasourceNameChatsChatUuidMessagesPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/datasources/{datasource_name}/chats/{chat_uuid}/messages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get All Datasources Route
 */
export const getAllDatasourcesRouteApiDatasourcesGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllDatasourcesRouteApiDatasourcesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllDatasourcesRouteApiDatasourcesGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/datasources',
        ...options
    });
};

/**
 * Delete Datasource Route
 */
export const deleteDatasourceRouteApiDatasourcesDatasourceNameDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteDatasourceRouteApiDatasourcesDatasourceNameDeleteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, DeleteDatasourceRouteApiDatasourcesDatasourceNameDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/datasources/{datasource_name}',
        ...options
    });
};

/**
 * Get Datasource Route
 */
export const getDatasourceRouteApiDatasourcesDatasourceNameGet = <ThrowOnError extends boolean = false>(options: Options<GetDatasourceRouteApiDatasourcesDatasourceNameGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDatasourceRouteApiDatasourcesDatasourceNameGetResponse, GetDatasourceRouteApiDatasourcesDatasourceNameGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/datasources/{datasource_name}',
        ...options
    });
};

/**
 * Update Datasource Route
 */
export const updateDatasourceRouteApiDatasourcesDatasourceNamePatch = <ThrowOnError extends boolean = false>(options: Options<UpdateDatasourceRouteApiDatasourcesDatasourceNamePatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).patch<unknown, UpdateDatasourceRouteApiDatasourcesDatasourceNamePatchError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/datasources/{datasource_name}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create Datasource Route
 */
export const createDatasourceRouteApiDatasourcesDatasourceNamePost = <ThrowOnError extends boolean = false>(options: Options<CreateDatasourceRouteApiDatasourcesDatasourceNamePostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, CreateDatasourceRouteApiDatasourcesDatasourceNamePostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/datasources/{datasource_name}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Processing Route
 * Add files or folders to generation queue and start processing if needed
 */
export const processingRouteApiProcessingPost = <ThrowOnError extends boolean = false>(options: Options<ProcessingRouteApiProcessingPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ProcessingRouteApiProcessingPostResponse, ProcessingRouteApiProcessingPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/processing',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Processing Status Route
 * Get the current status of the generation queue
 */
export const getProcessingStatusRouteApiProcessingStatusGet = <ThrowOnError extends boolean = false>(options?: Options<GetProcessingStatusRouteApiProcessingStatusGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetProcessingStatusRouteApiProcessingStatusGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/processing/status',
        ...options
    });
};

/**
 * Get Processing Steps Route
 */
export const getProcessingStepsRouteApiStacksStepsGet = <ThrowOnError extends boolean = false>(options?: Options<GetProcessingStepsRouteApiStacksStepsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetProcessingStepsRouteApiStacksStepsGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/stacks/steps',
        ...options
    });
};

/**
 * Get Processing Stacks Route
 */
export const getProcessingStacksRouteApiStacksStacksGet = <ThrowOnError extends boolean = false>(options?: Options<GetProcessingStacksRouteApiStacksStacksGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetProcessingStacksRouteApiStacksStacksGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/stacks/stacks',
        ...options
    });
};

/**
 * Create Processing Stack Route
 */
export const createProcessingStackRouteApiStacksStacksPost = <ThrowOnError extends boolean = false>(options: Options<CreateProcessingStackRouteApiStacksStacksPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateProcessingStackRouteApiStacksStacksPostResponse, CreateProcessingStackRouteApiStacksStacksPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/stacks/stacks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Processing Stack Route
 */
export const deleteProcessingStackRouteApiStacksStacksStackIdentifierDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteProcessingStackRouteApiStacksStacksStackIdentifierDeleteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, DeleteProcessingStackRouteApiStacksStacksStackIdentifierDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/stacks/stacks/{stack_identifier}',
        ...options
    });
};

/**
 * Get Processing Stack Route
 */
export const getProcessingStackRouteApiStacksStacksStackIdentifierGet = <ThrowOnError extends boolean = false>(options: Options<GetProcessingStackRouteApiStacksStacksStackIdentifierGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetProcessingStackRouteApiStacksStacksStackIdentifierGetResponse, GetProcessingStackRouteApiStacksStacksStackIdentifierGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/stacks/stacks/{stack_identifier}',
        ...options
    });
};

/**
 * Update Processing Stack Route
 */
export const updateProcessingStackRouteApiStacksStacksStackIdentifierPut = <ThrowOnError extends boolean = false>(options: Options<UpdateProcessingStackRouteApiStacksStacksStackIdentifierPutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<UpdateProcessingStackRouteApiStacksStacksStackIdentifierPutResponse, UpdateProcessingStackRouteApiStacksStacksStackIdentifierPutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/stacks/stacks/{stack_identifier}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Ollama Status Route
 * Get the current status of Ollama model downloads
 */
export const getOllamaStatusRouteApiOllamaStatusGet = <ThrowOnError extends boolean = false>(options?: Options<GetOllamaStatusRouteApiOllamaStatusGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetOllamaStatusRouteApiOllamaStatusGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/ollama-status',
        ...options
    });
};

/**
 * Health Route
 */
export const healthRouteApiHealthGet = <ThrowOnError extends boolean = false>(options?: Options<HealthRouteApiHealthGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HealthRouteApiHealthGetResponse, unknown, ThrowOnError>({
        url: '/api/health',
        ...options
    });
};