// This file is auto-generated by @hey-api/openapi-ts

/**
 * An annotation from the agent that is a text and an agent name.
 */
export type AgentAnnotation = {
    agent: string;
    text: string;
};

/**
 * An annotation on a message used to pass additional data about the message.
 * The type of the annotation is a string that can be one of the following:
 * - "document_file": A file uploaded by the user.
 * - "image": An image uploaded by the user.
 * - "agent": An annotation from the agent.
 * - "artifact": An artifact from the agent.
 * The data is one of the following types:
 * - AnnotationFileData: A file uploaded by the user.
 * - List[str]: A list of strings.
 * - AgentAnnotation: An annotation from the agent.
 * - ArtifactAnnotation: An artifact from the agent.
 */
export type AnnotationInput = {
    type: string;
    data: AnnotationFileDataInput | Array<string> | AgentAnnotation | ArtifactAnnotation;
};

/**
 * An annotation on a message used to pass additional data about the message.
 * The type of the annotation is a string that can be one of the following:
 * - "document_file": A file uploaded by the user.
 * - "image": An image uploaded by the user.
 * - "agent": An annotation from the agent.
 * - "artifact": An artifact from the agent.
 * The data is one of the following types:
 * - AnnotationFileData: A file uploaded by the user.
 * - List[str]: A list of strings.
 * - AgentAnnotation: An annotation from the agent.
 * - ArtifactAnnotation: An artifact from the agent.
 */
export type AnnotationOutput = {
    type: string;
    data: AnnotationFileDataOutput | Array<string> | AgentAnnotation | ArtifactAnnotation;
};

/**
 * A list of files used as context to generate the response.
 */
export type AnnotationFileDataInput = {
    /**
     * List of files
     */
    files?: Array<DocumentFileInput>;
};

/**
 * A list of files used as context to generate the response.
 */
export type AnnotationFileDataOutput = {
    /**
     * List of files
     */
    files?: Array<DocumentFileOutput>;
};

/**
 * An artifact from the agent that is a tool call and tool output.
 */
export type ArtifactAnnotation = {
    toolCall: {
        [key: string]: unknown;
    };
    toolOutput: {
        [key: string]: unknown;
    };
};

/**
 * Chat received from the vercel ai sdk from the frontend
 * Follows openai chat format + vercel ai sdk format
 */
export type ChatDataInput = {
    id: string;
    messages: Array<MessageDataInput> | null;
    chat_engine_params?: unknown;
};

/**
 * Chat received from the vercel ai sdk from the frontend
 * Follows openai chat format + vercel ai sdk format
 */
export type ChatDataOutput = {
    id: string;
    messages: Array<MessageDataOutput> | null;
    chat_engine_params?: unknown;
};

/**
 * Used in the backend to get a chat
 */
export type ChatResponse = {
    uuid: string;
    title: string;
    created_at: string;
    last_message_at: string;
    last_opened_at: string;
    messages: Array<MessageResponse>;
};

export type CreateSettingRequest = {
    schema_identifier: string;
};

export type DatasourceCreate = {
    type: 'FILES' | 'CHATS' | 'WINDOWS_SYNC';
    description?: string | null;
    settings_json?: string;
    embedding_setting_identifier?: string;
};

export type DatasourceResponse = {
    identifier: string;
    name: string;
    type: 'FILES' | 'CHATS' | 'WINDOWS_SYNC';
    description?: string | null;
    settings_json?: string;
    embedding_setting_identifier: string;
};

export type DatasourceUpdate = {
    description?: string | null;
    embedding_setting_identifier?: string | null;
};

export type DocumentFileInput = {
    id: string;
    name: string;
    type?: string;
    size?: number;
    url?: string;
    /**
     * The stored file path. Used internally in the server.
     */
    path?: string | null;
    /**
     * The document ids in the index.
     */
    refs?: Array<string> | null;
};

export type DocumentFileOutput = {
    id: string;
    name: string;
    type?: string;
    size?: number;
    url?: string;
    /**
     * The document ids in the index.
     */
    refs?: Array<string> | null;
};

export type FileInfoResponse = {
    id: number;
    name: string;
    path: string;
    original_path: string;
    content?: string | null;
    mime_type?: string | null;
    size?: number | null;
    uploaded_at: number;
    accessed_at: number;
    file_created_at: number;
    file_modified_at: number;
    stacks_to_process?: string | null;
    processed_stacks?: string | null;
    error_message?: string | null;
    status: string;
};

export type FileUploadItem = {
    original_path: string;
    base64_content: string;
    name: string;
    file_created_at: number;
    file_modified_at: number;
};

export type FolderInfoResponse = {
    id: number;
    name: string;
    path: string;
    original_path: string;
    uploaded_at: number;
    accessed_at: number;
    child_folders?: Array<FolderInfoResponse> | null;
    child_files?: Array<FileInfoResponse> | null;
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

export type ItemProcessingStatusResponse = {
    original_path: string;
    name: string;
    queued_stacks: Array<string>;
    status: 'pending' | 'processing' | 'queued' | 'completed' | 'error';
};

/**
 * Used in the backend to create a message / add a message to a chat
 */
export type MessageCreate = {
    uuid: string;
    role: MessageRole;
    content: string;
    annotations: Array<AnnotationInput> | null;
    created_at: string;
};

/**
 * Messages received from the vercel ai sdk from the frontend
 * Follows openai message format + vercel ai sdk format
 */
export type MessageDataInput = {
    id: string;
    role: MessageRole;
    content: string;
    createdAt?: string | null;
    annotations?: Array<AnnotationInput> | null;
    is_upvoted?: boolean | null;
};

/**
 * Messages received from the vercel ai sdk from the frontend
 * Follows openai message format + vercel ai sdk format
 */
export type MessageDataOutput = {
    id: string;
    role: MessageRole;
    content: string;
    createdAt?: string | null;
    annotations?: Array<AnnotationOutput> | null;
    is_upvoted?: boolean | null;
};

/**
 * Used in the backend to get a message
 */
export type MessageResponse = {
    uuid: string;
    role: 'system' | 'user' | 'assistant' | 'function' | 'tool' | 'chatbot' | 'model';
    content: string;
    annotations: Array<AnnotationOutput> | null;
    is_upvoted: boolean | null;
    created_at: string;
};

/**
 * Message role.
 */
export type MessageRole = 'system' | 'user' | 'assistant' | 'function' | 'tool' | 'chatbot' | 'model';

export type OllamaStatusResponse = {
    is_downloading: boolean;
};

export type ProcessingItem = {
    original_path: string;
    stacks_identifiers_to_queue: Array<string>;
};

export type ProcessingRequest = {
    items: Array<ProcessingItem>;
};

export type ProcessingStackCreate = {
    display_name: string;
    description?: string | null;
    supported_extensions?: Array<string> | null;
    steps?: Array<ProcessingStackStepCreate> | null;
};

export type ProcessingStackResponse = {
    identifier: string;
    display_name: string;
    description?: string | null;
    supported_extensions: Array<string>;
    is_enabled: boolean;
    steps: Array<ProcessingStackStepResponse>;
};

export type ProcessingStackStepCreate = {
    step_identifier: string;
    order: number;
    parameters: {
        [key: string]: unknown;
    };
};

export type ProcessingStackStepResponse = {
    id: number;
    order: number;
    parameters?: {
        [key: string]: unknown;
    } | null;
    step_identifier: string;
    step: ProcessingStepResponse;
};

export type ProcessingStackStepUpdate = {
    step_identifier: string;
    order: number;
    parameters?: {
        [key: string]: unknown;
    } | null;
};

export type ProcessingStackUpdate = {
    steps: Array<ProcessingStackStepUpdate>;
    supported_extensions: Array<string>;
};

export type ProcessingStatusResponse = {
    queued_count: number;
    queued_items: Array<ItemProcessingStatusResponse>;
    processing_count: number;
    processing_items: Array<ItemProcessingStatusResponse>;
};

export type ProcessingStepResponse = {
    identifier: string;
    display_name: string;
    description?: string | null;
    type: string;
    parameters_schema: {
        [key: string]: unknown;
    };
};

export type SettingResponse = {
    identifier: string;
    schema_identifier: string;
    setting_schema_json: string;
    value_json: string;
};

export type UpdateSettingRequest = {
    values_to_update_json: string;
};

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type ChatStreamingRouteApiChatPostData = {
    body: ChatDataInput;
    headers?: {
        'x-user-id'?: string | null;
    };
    path?: never;
    query: {
        datasource_identifier?: string;
        user_id: string;
        datasource_name: string;
    };
    url: '/api/chat';
};

export type ChatStreamingRouteApiChatPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ChatStreamingRouteApiChatPostError = ChatStreamingRouteApiChatPostErrors[keyof ChatStreamingRouteApiChatPostErrors];

export type ChatStreamingRouteApiChatPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ChatRequestRouteApiChatRequestPostData = {
    body: ChatDataInput;
    headers?: {
        'x-user-id'?: string | null;
    };
    path?: never;
    query: {
        datasource_identifier?: string;
        user_id: string;
        datasource_name: string;
    };
    url: '/api/chat/request';
};

export type ChatRequestRouteApiChatRequestPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ChatRequestRouteApiChatRequestPostError = ChatRequestRouteApiChatRequestPostErrors[keyof ChatRequestRouteApiChatRequestPostErrors];

export type ChatRequestRouteApiChatRequestPostResponses = {
    /**
     * Successful Response
     */
    200: ChatDataOutput;
};

export type ChatRequestRouteApiChatRequestPostResponse = ChatRequestRouteApiChatRequestPostResponses[keyof ChatRequestRouteApiChatRequestPostResponses];

export type DeleteSettingRouteApiSettingsIdentifierDeleteData = {
    body?: never;
    headers?: {
        'x-user-id'?: string | null;
    };
    path: {
        identifier: string;
    };
    query: {
        user_id: string;
    };
    url: '/api/settings/{identifier}';
};

export type DeleteSettingRouteApiSettingsIdentifierDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteSettingRouteApiSettingsIdentifierDeleteError = DeleteSettingRouteApiSettingsIdentifierDeleteErrors[keyof DeleteSettingRouteApiSettingsIdentifierDeleteErrors];

export type DeleteSettingRouteApiSettingsIdentifierDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetSettingRouteApiSettingsIdentifierGetData = {
    body?: never;
    headers?: {
        'x-user-id'?: string | null;
    };
    path: {
        identifier: string;
    };
    query: {
        user_id: string;
    };
    url: '/api/settings/{identifier}';
};

export type GetSettingRouteApiSettingsIdentifierGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetSettingRouteApiSettingsIdentifierGetError = GetSettingRouteApiSettingsIdentifierGetErrors[keyof GetSettingRouteApiSettingsIdentifierGetErrors];

export type GetSettingRouteApiSettingsIdentifierGetResponses = {
    /**
     * Successful Response
     */
    200: SettingResponse;
};

export type GetSettingRouteApiSettingsIdentifierGetResponse = GetSettingRouteApiSettingsIdentifierGetResponses[keyof GetSettingRouteApiSettingsIdentifierGetResponses];

export type UpdateSettingRouteApiSettingsIdentifierPatchData = {
    body: UpdateSettingRequest;
    headers?: {
        'x-user-id'?: string | null;
    };
    path: {
        identifier: string;
    };
    query: {
        user_id: string;
    };
    url: '/api/settings/{identifier}';
};

export type UpdateSettingRouteApiSettingsIdentifierPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateSettingRouteApiSettingsIdentifierPatchError = UpdateSettingRouteApiSettingsIdentifierPatchErrors[keyof UpdateSettingRouteApiSettingsIdentifierPatchErrors];

export type UpdateSettingRouteApiSettingsIdentifierPatchResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CreateSettingRouteApiSettingsIdentifierPostData = {
    body: CreateSettingRequest;
    headers?: {
        'x-user-id'?: string | null;
    };
    path: {
        identifier: string;
    };
    query: {
        user_id: string;
    };
    url: '/api/settings/{identifier}';
};

export type CreateSettingRouteApiSettingsIdentifierPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateSettingRouteApiSettingsIdentifierPostError = CreateSettingRouteApiSettingsIdentifierPostErrors[keyof CreateSettingRouteApiSettingsIdentifierPostErrors];

export type CreateSettingRouteApiSettingsIdentifierPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetAllSettingsRouteApiSettingsGetData = {
    body?: never;
    headers?: {
        'x-user-id'?: string | null;
    };
    path?: never;
    query: {
        user_id: string;
    };
    url: '/api/settings';
};

export type GetAllSettingsRouteApiSettingsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetAllSettingsRouteApiSettingsGetError = GetAllSettingsRouteApiSettingsGetErrors[keyof GetAllSettingsRouteApiSettingsGetErrors];

export type GetAllSettingsRouteApiSettingsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<SettingResponse>;
};

export type GetAllSettingsRouteApiSettingsGetResponse = GetAllSettingsRouteApiSettingsGetResponses[keyof GetAllSettingsRouteApiSettingsGetResponses];

export type GetAllSettingsWithSchemaIdentifierRouteApiSettingsSchemaSchemaIdentifierGetData = {
    body?: never;
    headers?: {
        'x-user-id'?: string | null;
    };
    path: {
        schema_identifier: string;
    };
    query: {
        user_id: string;
    };
    url: '/api/settings/schema/{schema_identifier}';
};

export type GetAllSettingsWithSchemaIdentifierRouteApiSettingsSchemaSchemaIdentifierGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetAllSettingsWithSchemaIdentifierRouteApiSettingsSchemaSchemaIdentifierGetError = GetAllSettingsWithSchemaIdentifierRouteApiSettingsSchemaSchemaIdentifierGetErrors[keyof GetAllSettingsWithSchemaIdentifierRouteApiSettingsSchemaSchemaIdentifierGetErrors];

export type GetAllSettingsWithSchemaIdentifierRouteApiSettingsSchemaSchemaIdentifierGetResponses = {
    /**
     * Successful Response
     */
    200: Array<SettingResponse>;
};

export type GetAllSettingsWithSchemaIdentifierRouteApiSettingsSchemaSchemaIdentifierGetResponse = GetAllSettingsWithSchemaIdentifierRouteApiSettingsSchemaSchemaIdentifierGetResponses[keyof GetAllSettingsWithSchemaIdentifierRouteApiSettingsSchemaSchemaIdentifierGetResponses];

export type UploadFileRouteApiDatasourcesDatasourceNameFileManagerUploadFilePostData = {
    body: FileUploadItem;
    headers?: {
        'x-user-id'?: string | null;
    };
    path: {
        datasource_name: string;
    };
    query: {
        user_id: string;
    };
    url: '/api/datasources/{datasource_name}/file-manager/upload-file';
};

export type UploadFileRouteApiDatasourcesDatasourceNameFileManagerUploadFilePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UploadFileRouteApiDatasourcesDatasourceNameFileManagerUploadFilePostError = UploadFileRouteApiDatasourcesDatasourceNameFileManagerUploadFilePostErrors[keyof UploadFileRouteApiDatasourcesDatasourceNameFileManagerUploadFilePostErrors];

export type UploadFileRouteApiDatasourcesDatasourceNameFileManagerUploadFilePostResponses = {
    /**
     * Successful Response
     */
    200: FileInfoResponse;
};

export type UploadFileRouteApiDatasourcesDatasourceNameFileManagerUploadFilePostResponse = UploadFileRouteApiDatasourcesDatasourceNameFileManagerUploadFilePostResponses[keyof UploadFileRouteApiDatasourcesDatasourceNameFileManagerUploadFilePostResponses];

export type DeleteRouteApiDatasourcesDatasourceNameFileManagerEncodedOriginalPathDeleteData = {
    body?: never;
    headers?: {
        'x-user-id'?: string | null;
    };
    path: {
        encoded_original_path: string;
        datasource_name: string;
    };
    query: {
        user_id: string;
    };
    url: '/api/datasources/{datasource_name}/file-manager/{encoded_original_path}';
};

export type DeleteRouteApiDatasourcesDatasourceNameFileManagerEncodedOriginalPathDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteRouteApiDatasourcesDatasourceNameFileManagerEncodedOriginalPathDeleteError = DeleteRouteApiDatasourcesDatasourceNameFileManagerEncodedOriginalPathDeleteErrors[keyof DeleteRouteApiDatasourcesDatasourceNameFileManagerEncodedOriginalPathDeleteErrors];

export type DeleteRouteApiDatasourcesDatasourceNameFileManagerEncodedOriginalPathDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetFolderInfoRouteApiDatasourcesDatasourceNameFileManagerFolderEncodedOriginalPathGetData = {
    body?: never;
    headers?: {
        'x-user-id'?: string | null;
    };
    path: {
        encoded_original_path: string;
        datasource_name: string;
    };
    query: {
        include_child_folders_files_recursively?: boolean;
        user_id: string;
    };
    url: '/api/datasources/{datasource_name}/file-manager/folder/{encoded_original_path}';
};

export type GetFolderInfoRouteApiDatasourcesDatasourceNameFileManagerFolderEncodedOriginalPathGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetFolderInfoRouteApiDatasourcesDatasourceNameFileManagerFolderEncodedOriginalPathGetError = GetFolderInfoRouteApiDatasourcesDatasourceNameFileManagerFolderEncodedOriginalPathGetErrors[keyof GetFolderInfoRouteApiDatasourcesDatasourceNameFileManagerFolderEncodedOriginalPathGetErrors];

export type GetFolderInfoRouteApiDatasourcesDatasourceNameFileManagerFolderEncodedOriginalPathGetResponses = {
    /**
     * Successful Response
     */
    200: FolderInfoResponse;
};

export type GetFolderInfoRouteApiDatasourcesDatasourceNameFileManagerFolderEncodedOriginalPathGetResponse = GetFolderInfoRouteApiDatasourcesDatasourceNameFileManagerFolderEncodedOriginalPathGetResponses[keyof GetFolderInfoRouteApiDatasourcesDatasourceNameFileManagerFolderEncodedOriginalPathGetResponses];

export type GetFileInfoRouteApiDatasourcesDatasourceNameFileManagerFileEncodedOriginalPathGetData = {
    body?: never;
    headers?: {
        'x-user-id'?: string | null;
    };
    path: {
        encoded_original_path: string;
        datasource_name: string;
    };
    query: {
        include_content?: boolean;
        user_id: string;
    };
    url: '/api/datasources/{datasource_name}/file-manager/file/{encoded_original_path}';
};

export type GetFileInfoRouteApiDatasourcesDatasourceNameFileManagerFileEncodedOriginalPathGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetFileInfoRouteApiDatasourcesDatasourceNameFileManagerFileEncodedOriginalPathGetError = GetFileInfoRouteApiDatasourcesDatasourceNameFileManagerFileEncodedOriginalPathGetErrors[keyof GetFileInfoRouteApiDatasourcesDatasourceNameFileManagerFileEncodedOriginalPathGetErrors];

export type GetFileInfoRouteApiDatasourcesDatasourceNameFileManagerFileEncodedOriginalPathGetResponses = {
    /**
     * Successful Response
     */
    200: FileInfoResponse;
};

export type GetFileInfoRouteApiDatasourcesDatasourceNameFileManagerFileEncodedOriginalPathGetResponse = GetFileInfoRouteApiDatasourcesDatasourceNameFileManagerFileEncodedOriginalPathGetResponses[keyof GetFileInfoRouteApiDatasourcesDatasourceNameFileManagerFileEncodedOriginalPathGetResponses];

export type DownloadFileRouteApiDatasourcesDatasourceNameFileManagerFileEncodedOriginalPathDownloadGetData = {
    body?: never;
    headers?: {
        'x-user-id'?: string | null;
    };
    path: {
        encoded_original_path: string;
        datasource_name: string;
    };
    query: {
        user_id: string;
    };
    url: '/api/datasources/{datasource_name}/file-manager/file/{encoded_original_path}/download';
};

export type DownloadFileRouteApiDatasourcesDatasourceNameFileManagerFileEncodedOriginalPathDownloadGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DownloadFileRouteApiDatasourcesDatasourceNameFileManagerFileEncodedOriginalPathDownloadGetError = DownloadFileRouteApiDatasourcesDatasourceNameFileManagerFileEncodedOriginalPathDownloadGetErrors[keyof DownloadFileRouteApiDatasourcesDatasourceNameFileManagerFileEncodedOriginalPathDownloadGetErrors];

export type DownloadFileRouteApiDatasourcesDatasourceNameFileManagerFileEncodedOriginalPathDownloadGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type DownloadFolderRouteApiDatasourcesDatasourceNameFileManagerFolderEncodedOriginalPathDownloadGetData = {
    body?: never;
    headers?: {
        'x-user-id'?: string | null;
    };
    path: {
        encoded_original_path: string;
        datasource_name: string;
    };
    query: {
        user_id: string;
    };
    url: '/api/datasources/{datasource_name}/file-manager/folder/{encoded_original_path}/download';
};

export type DownloadFolderRouteApiDatasourcesDatasourceNameFileManagerFolderEncodedOriginalPathDownloadGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DownloadFolderRouteApiDatasourcesDatasourceNameFileManagerFolderEncodedOriginalPathDownloadGetError = DownloadFolderRouteApiDatasourcesDatasourceNameFileManagerFolderEncodedOriginalPathDownloadGetErrors[keyof DownloadFolderRouteApiDatasourcesDatasourceNameFileManagerFolderEncodedOriginalPathDownloadGetErrors];

export type DownloadFolderRouteApiDatasourcesDatasourceNameFileManagerFolderEncodedOriginalPathDownloadGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type DeleteProcessedDataRouteApiDatasourcesDatasourceNameFileManagerProcessedDataEncodedOriginalPathDeleteData = {
    body?: never;
    headers?: {
        'x-user-id'?: string | null;
    };
    path: {
        encoded_original_path: string;
        datasource_name: string;
    };
    query: {
        user_id: string;
    };
    url: '/api/datasources/{datasource_name}/file-manager/processed-data/{encoded_original_path}';
};

export type DeleteProcessedDataRouteApiDatasourcesDatasourceNameFileManagerProcessedDataEncodedOriginalPathDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteProcessedDataRouteApiDatasourcesDatasourceNameFileManagerProcessedDataEncodedOriginalPathDeleteError = DeleteProcessedDataRouteApiDatasourcesDatasourceNameFileManagerProcessedDataEncodedOriginalPathDeleteErrors[keyof DeleteProcessedDataRouteApiDatasourcesDatasourceNameFileManagerProcessedDataEncodedOriginalPathDeleteErrors];

export type DeleteProcessedDataRouteApiDatasourcesDatasourceNameFileManagerProcessedDataEncodedOriginalPathDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetAllChatsRouteApiDatasourcesDatasourceNameChatsGetData = {
    body?: never;
    headers?: {
        'x-user-id'?: string | null;
    };
    path: {
        datasource_name: string;
    };
    query: {
        include_messages?: boolean;
        user_id: string;
    };
    url: '/api/datasources/{datasource_name}/chats';
};

export type GetAllChatsRouteApiDatasourcesDatasourceNameChatsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetAllChatsRouteApiDatasourcesDatasourceNameChatsGetError = GetAllChatsRouteApiDatasourcesDatasourceNameChatsGetErrors[keyof GetAllChatsRouteApiDatasourcesDatasourceNameChatsGetErrors];

export type GetAllChatsRouteApiDatasourcesDatasourceNameChatsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ChatResponse>;
};

export type GetAllChatsRouteApiDatasourcesDatasourceNameChatsGetResponse = GetAllChatsRouteApiDatasourcesDatasourceNameChatsGetResponses[keyof GetAllChatsRouteApiDatasourcesDatasourceNameChatsGetResponses];

export type CreateChatRouteApiDatasourcesDatasourceNameChatsPostData = {
    body?: never;
    headers?: {
        'x-user-id'?: string | null;
    };
    path: {
        datasource_name: string;
    };
    query: {
        chat_uuid?: string;
        user_id: string;
    };
    url: '/api/datasources/{datasource_name}/chats';
};

export type CreateChatRouteApiDatasourcesDatasourceNameChatsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateChatRouteApiDatasourcesDatasourceNameChatsPostError = CreateChatRouteApiDatasourcesDatasourceNameChatsPostErrors[keyof CreateChatRouteApiDatasourcesDatasourceNameChatsPostErrors];

export type CreateChatRouteApiDatasourcesDatasourceNameChatsPostResponses = {
    /**
     * Successful Response
     */
    201: ChatResponse;
};

export type CreateChatRouteApiDatasourcesDatasourceNameChatsPostResponse = CreateChatRouteApiDatasourcesDatasourceNameChatsPostResponses[keyof CreateChatRouteApiDatasourcesDatasourceNameChatsPostResponses];

export type DeleteChatRouteApiDatasourcesDatasourceNameChatsChatUuidDeleteData = {
    body?: never;
    headers?: {
        'x-user-id'?: string | null;
    };
    path: {
        chat_uuid: string;
        datasource_name: string;
    };
    query: {
        user_id: string;
    };
    url: '/api/datasources/{datasource_name}/chats/{chat_uuid}';
};

export type DeleteChatRouteApiDatasourcesDatasourceNameChatsChatUuidDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteChatRouteApiDatasourcesDatasourceNameChatsChatUuidDeleteError = DeleteChatRouteApiDatasourcesDatasourceNameChatsChatUuidDeleteErrors[keyof DeleteChatRouteApiDatasourcesDatasourceNameChatsChatUuidDeleteErrors];

export type DeleteChatRouteApiDatasourcesDatasourceNameChatsChatUuidDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetChatRouteApiDatasourcesDatasourceNameChatsChatUuidGetData = {
    body?: never;
    headers?: {
        'x-user-id'?: string | null;
    };
    path: {
        chat_uuid: string;
        datasource_name: string;
    };
    query: {
        include_messages?: boolean;
        create_if_not_found?: boolean;
        update_last_opened_at?: boolean;
        user_id: string;
    };
    url: '/api/datasources/{datasource_name}/chats/{chat_uuid}';
};

export type GetChatRouteApiDatasourcesDatasourceNameChatsChatUuidGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetChatRouteApiDatasourcesDatasourceNameChatsChatUuidGetError = GetChatRouteApiDatasourcesDatasourceNameChatsChatUuidGetErrors[keyof GetChatRouteApiDatasourcesDatasourceNameChatsChatUuidGetErrors];

export type GetChatRouteApiDatasourcesDatasourceNameChatsChatUuidGetResponses = {
    /**
     * Successful Response
     */
    200: ChatResponse;
};

export type GetChatRouteApiDatasourcesDatasourceNameChatsChatUuidGetResponse = GetChatRouteApiDatasourcesDatasourceNameChatsChatUuidGetResponses[keyof GetChatRouteApiDatasourcesDatasourceNameChatsChatUuidGetResponses];

export type UpdateChatTitleRouteApiDatasourcesDatasourceNameChatsChatUuidPutData = {
    body?: never;
    headers?: {
        'x-user-id'?: string | null;
    };
    path: {
        datasource_name: string;
        chat_uuid: string;
    };
    query: {
        title: string;
        user_id: string;
    };
    url: '/api/datasources/{datasource_name}/chats/{chat_uuid}';
};

export type UpdateChatTitleRouteApiDatasourcesDatasourceNameChatsChatUuidPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateChatTitleRouteApiDatasourcesDatasourceNameChatsChatUuidPutError = UpdateChatTitleRouteApiDatasourcesDatasourceNameChatsChatUuidPutErrors[keyof UpdateChatTitleRouteApiDatasourcesDatasourceNameChatsChatUuidPutErrors];

export type UpdateChatTitleRouteApiDatasourcesDatasourceNameChatsChatUuidPutResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AddMessageToChatRouteApiDatasourcesDatasourceNameChatsChatUuidMessagesPostData = {
    body: MessageCreate;
    headers?: {
        'x-user-id'?: string | null;
    };
    path: {
        datasource_name: string;
        chat_uuid: string;
    };
    query: {
        user_id: string;
    };
    url: '/api/datasources/{datasource_name}/chats/{chat_uuid}/messages';
};

export type AddMessageToChatRouteApiDatasourcesDatasourceNameChatsChatUuidMessagesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AddMessageToChatRouteApiDatasourcesDatasourceNameChatsChatUuidMessagesPostError = AddMessageToChatRouteApiDatasourcesDatasourceNameChatsChatUuidMessagesPostErrors[keyof AddMessageToChatRouteApiDatasourcesDatasourceNameChatsChatUuidMessagesPostErrors];

export type AddMessageToChatRouteApiDatasourcesDatasourceNameChatsChatUuidMessagesPostResponses = {
    /**
     * Successful Response
     */
    201: unknown;
};

export type GetAllDatasourcesRouteApiDatasourcesGetData = {
    body?: never;
    headers?: {
        'x-user-id'?: string | null;
    };
    path?: never;
    query: {
        user_id: string;
    };
    url: '/api/datasources';
};

export type GetAllDatasourcesRouteApiDatasourcesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetAllDatasourcesRouteApiDatasourcesGetError = GetAllDatasourcesRouteApiDatasourcesGetErrors[keyof GetAllDatasourcesRouteApiDatasourcesGetErrors];

export type GetAllDatasourcesRouteApiDatasourcesGetResponses = {
    /**
     * Successful Response
     */
    200: Array<DatasourceResponse>;
};

export type GetAllDatasourcesRouteApiDatasourcesGetResponse = GetAllDatasourcesRouteApiDatasourcesGetResponses[keyof GetAllDatasourcesRouteApiDatasourcesGetResponses];

export type DeleteDatasourceRouteApiDatasourcesDatasourceNameDeleteData = {
    body?: never;
    headers?: {
        'x-user-id'?: string | null;
    };
    path: {
        datasource_name: string;
    };
    query: {
        user_id: string;
    };
    url: '/api/datasources/{datasource_name}';
};

export type DeleteDatasourceRouteApiDatasourcesDatasourceNameDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteDatasourceRouteApiDatasourcesDatasourceNameDeleteError = DeleteDatasourceRouteApiDatasourcesDatasourceNameDeleteErrors[keyof DeleteDatasourceRouteApiDatasourcesDatasourceNameDeleteErrors];

export type DeleteDatasourceRouteApiDatasourcesDatasourceNameDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetDatasourceRouteApiDatasourcesDatasourceNameGetData = {
    body?: never;
    headers?: {
        'x-user-id'?: string | null;
    };
    path: {
        datasource_name: string;
    };
    query: {
        user_id: string;
    };
    url: '/api/datasources/{datasource_name}';
};

export type GetDatasourceRouteApiDatasourcesDatasourceNameGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetDatasourceRouteApiDatasourcesDatasourceNameGetError = GetDatasourceRouteApiDatasourcesDatasourceNameGetErrors[keyof GetDatasourceRouteApiDatasourcesDatasourceNameGetErrors];

export type GetDatasourceRouteApiDatasourcesDatasourceNameGetResponses = {
    /**
     * Successful Response
     */
    200: DatasourceResponse;
};

export type GetDatasourceRouteApiDatasourcesDatasourceNameGetResponse = GetDatasourceRouteApiDatasourcesDatasourceNameGetResponses[keyof GetDatasourceRouteApiDatasourcesDatasourceNameGetResponses];

export type UpdateDatasourceRouteApiDatasourcesDatasourceNamePatchData = {
    body: DatasourceUpdate;
    headers?: {
        'x-user-id'?: string | null;
    };
    path: {
        datasource_name: string;
    };
    query: {
        user_id: string;
    };
    url: '/api/datasources/{datasource_name}';
};

export type UpdateDatasourceRouteApiDatasourcesDatasourceNamePatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateDatasourceRouteApiDatasourcesDatasourceNamePatchError = UpdateDatasourceRouteApiDatasourcesDatasourceNamePatchErrors[keyof UpdateDatasourceRouteApiDatasourcesDatasourceNamePatchErrors];

export type UpdateDatasourceRouteApiDatasourcesDatasourceNamePatchResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CreateDatasourceRouteApiDatasourcesDatasourceNamePostData = {
    body: DatasourceCreate;
    headers?: {
        'x-user-id'?: string | null;
    };
    path: {
        datasource_name: string;
    };
    query: {
        user_id: string;
    };
    url: '/api/datasources/{datasource_name}';
};

export type CreateDatasourceRouteApiDatasourcesDatasourceNamePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateDatasourceRouteApiDatasourcesDatasourceNamePostError = CreateDatasourceRouteApiDatasourcesDatasourceNamePostErrors[keyof CreateDatasourceRouteApiDatasourcesDatasourceNamePostErrors];

export type CreateDatasourceRouteApiDatasourcesDatasourceNamePostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ProcessingRouteApiProcessingPostData = {
    body: ProcessingRequest;
    headers?: {
        'x-user-id'?: string | null;
    };
    path?: never;
    query: {
        user_id: string;
    };
    url: '/api/processing';
};

export type ProcessingRouteApiProcessingPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ProcessingRouteApiProcessingPostError = ProcessingRouteApiProcessingPostErrors[keyof ProcessingRouteApiProcessingPostErrors];

export type ProcessingRouteApiProcessingPostResponses = {
    /**
     * Successful Response
     */
    200: ProcessingStatusResponse;
};

export type ProcessingRouteApiProcessingPostResponse = ProcessingRouteApiProcessingPostResponses[keyof ProcessingRouteApiProcessingPostResponses];

export type GetProcessingStatusRouteApiProcessingStatusGetData = {
    body?: never;
    headers?: {
        'x-user-id'?: string | null;
    };
    path?: never;
    query?: {
        user_id?: string | null;
    };
    url: '/api/processing/status';
};

export type GetProcessingStatusRouteApiProcessingStatusGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetProcessingStatusRouteApiProcessingStatusGetError = GetProcessingStatusRouteApiProcessingStatusGetErrors[keyof GetProcessingStatusRouteApiProcessingStatusGetErrors];

export type GetProcessingStatusRouteApiProcessingStatusGetResponses = {
    /**
     * Successful Response
     */
    200: ProcessingStatusResponse;
};

export type GetProcessingStatusRouteApiProcessingStatusGetResponse = GetProcessingStatusRouteApiProcessingStatusGetResponses[keyof GetProcessingStatusRouteApiProcessingStatusGetResponses];

export type GetProcessingStepsRouteApiStacksStepsGetData = {
    body?: never;
    headers?: {
        'x-user-id'?: string | null;
    };
    path?: never;
    query: {
        user_id: string;
    };
    url: '/api/stacks/steps';
};

export type GetProcessingStepsRouteApiStacksStepsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetProcessingStepsRouteApiStacksStepsGetError = GetProcessingStepsRouteApiStacksStepsGetErrors[keyof GetProcessingStepsRouteApiStacksStepsGetErrors];

export type GetProcessingStepsRouteApiStacksStepsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ProcessingStepResponse>;
};

export type GetProcessingStepsRouteApiStacksStepsGetResponse = GetProcessingStepsRouteApiStacksStepsGetResponses[keyof GetProcessingStepsRouteApiStacksStepsGetResponses];

export type GetProcessingStacksRouteApiStacksStacksGetData = {
    body?: never;
    headers?: {
        'x-user-id'?: string | null;
    };
    path?: never;
    query: {
        user_id: string;
    };
    url: '/api/stacks/stacks';
};

export type GetProcessingStacksRouteApiStacksStacksGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetProcessingStacksRouteApiStacksStacksGetError = GetProcessingStacksRouteApiStacksStacksGetErrors[keyof GetProcessingStacksRouteApiStacksStacksGetErrors];

export type GetProcessingStacksRouteApiStacksStacksGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ProcessingStackResponse>;
};

export type GetProcessingStacksRouteApiStacksStacksGetResponse = GetProcessingStacksRouteApiStacksStacksGetResponses[keyof GetProcessingStacksRouteApiStacksStacksGetResponses];

export type CreateProcessingStackRouteApiStacksStacksPostData = {
    body: ProcessingStackCreate;
    headers?: {
        'x-user-id'?: string | null;
    };
    path?: never;
    query: {
        user_id: string;
    };
    url: '/api/stacks/stacks';
};

export type CreateProcessingStackRouteApiStacksStacksPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateProcessingStackRouteApiStacksStacksPostError = CreateProcessingStackRouteApiStacksStacksPostErrors[keyof CreateProcessingStackRouteApiStacksStacksPostErrors];

export type CreateProcessingStackRouteApiStacksStacksPostResponses = {
    /**
     * Successful Response
     */
    200: ProcessingStackResponse;
};

export type CreateProcessingStackRouteApiStacksStacksPostResponse = CreateProcessingStackRouteApiStacksStacksPostResponses[keyof CreateProcessingStackRouteApiStacksStacksPostResponses];

export type DeleteProcessingStackRouteApiStacksStacksStackIdentifierDeleteData = {
    body?: never;
    headers?: {
        'x-user-id'?: string | null;
    };
    path: {
        stack_identifier: string;
    };
    query: {
        user_id: string;
    };
    url: '/api/stacks/stacks/{stack_identifier}';
};

export type DeleteProcessingStackRouteApiStacksStacksStackIdentifierDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteProcessingStackRouteApiStacksStacksStackIdentifierDeleteError = DeleteProcessingStackRouteApiStacksStacksStackIdentifierDeleteErrors[keyof DeleteProcessingStackRouteApiStacksStacksStackIdentifierDeleteErrors];

export type DeleteProcessingStackRouteApiStacksStacksStackIdentifierDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetProcessingStackRouteApiStacksStacksStackIdentifierGetData = {
    body?: never;
    headers?: {
        'x-user-id'?: string | null;
    };
    path: {
        stack_identifier: string;
    };
    query: {
        user_id: string;
    };
    url: '/api/stacks/stacks/{stack_identifier}';
};

export type GetProcessingStackRouteApiStacksStacksStackIdentifierGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetProcessingStackRouteApiStacksStacksStackIdentifierGetError = GetProcessingStackRouteApiStacksStacksStackIdentifierGetErrors[keyof GetProcessingStackRouteApiStacksStacksStackIdentifierGetErrors];

export type GetProcessingStackRouteApiStacksStacksStackIdentifierGetResponses = {
    /**
     * Successful Response
     */
    200: ProcessingStackResponse;
};

export type GetProcessingStackRouteApiStacksStacksStackIdentifierGetResponse = GetProcessingStackRouteApiStacksStacksStackIdentifierGetResponses[keyof GetProcessingStackRouteApiStacksStacksStackIdentifierGetResponses];

export type UpdateProcessingStackRouteApiStacksStacksStackIdentifierPutData = {
    body: ProcessingStackUpdate;
    headers?: {
        'x-user-id'?: string | null;
    };
    path: {
        stack_identifier: string;
    };
    query: {
        user_id: string;
    };
    url: '/api/stacks/stacks/{stack_identifier}';
};

export type UpdateProcessingStackRouteApiStacksStacksStackIdentifierPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateProcessingStackRouteApiStacksStacksStackIdentifierPutError = UpdateProcessingStackRouteApiStacksStacksStackIdentifierPutErrors[keyof UpdateProcessingStackRouteApiStacksStacksStackIdentifierPutErrors];

export type UpdateProcessingStackRouteApiStacksStacksStackIdentifierPutResponses = {
    /**
     * Successful Response
     */
    200: ProcessingStackResponse;
};

export type UpdateProcessingStackRouteApiStacksStacksStackIdentifierPutResponse = UpdateProcessingStackRouteApiStacksStacksStackIdentifierPutResponses[keyof UpdateProcessingStackRouteApiStacksStacksStackIdentifierPutResponses];

export type GetOllamaStatusRouteApiOllamaStatusGetData = {
    body?: never;
    headers?: {
        'x-user-id'?: string | null;
    };
    path?: never;
    query: {
        user_id: string;
    };
    url: '/api/ollama-status';
};

export type GetOllamaStatusRouteApiOllamaStatusGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetOllamaStatusRouteApiOllamaStatusGetError = GetOllamaStatusRouteApiOllamaStatusGetErrors[keyof GetOllamaStatusRouteApiOllamaStatusGetErrors];

export type GetOllamaStatusRouteApiOllamaStatusGetResponses = {
    /**
     * Successful Response
     */
    200: OllamaStatusResponse;
};

export type GetOllamaStatusRouteApiOllamaStatusGetResponse = GetOllamaStatusRouteApiOllamaStatusGetResponses[keyof GetOllamaStatusRouteApiOllamaStatusGetResponses];

export type HealthRouteApiHealthGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/health';
};

export type HealthRouteApiHealthGetResponses = {
    /**
     * Successful Response
     */
    200: string;
};

export type HealthRouteApiHealthGetResponse = HealthRouteApiHealthGetResponses[keyof HealthRouteApiHealthGetResponses];