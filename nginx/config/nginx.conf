events {
    worker_connections 1024;
}

http {
    default_type application/octet-stream;

    access_log /dev/stdout;
    error_log /dev/stderr;
    
#    gzip on;
#    sendfile on;
#    tcp_nopush on;
#    types_hash_max_size 2048;

    # Redirect all http requests to https except for the certbot challenge
    server {
        listen 80;
        server_name $HOST_DOMAIN; # Catch all requests to this machine on port 80

        # ACME challenge location for Let's Encrypt
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    # HTTPS server
    server {

        # Enable HTTP/2
        http2 on;
        
        listen 443 ssl;
        # Catch all requests to this machine on port 443
        server_name $HOST_DOMAIN;

        # SSL configuration
        ssl_certificate /etc/letsencrypt/live/$HOST_DOMAIN/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/$HOST_DOMAIN/privkey.pem;
        ssl_trusted_certificate /etc/letsencrypt/live/$HOST_DOMAIN/chain.pem;

        # SSL parameters
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets off;
        ssl_stapling on;
        ssl_stapling_verify on;
        add_header Strict-Transport-Security "max-age=31536000" always;

        # Handle errors
        proxy_intercept_errors on;


        # Docker DNS resolver needed for redirecting to docker containers
        resolver 127.0.0.11 ipv6=off;

        # Security headers
        add_header X-Frame-Options SAMEORIGIN;
        add_header X-XSS-Protection "1; mode=block";

        # Proxy buffer settings
        proxy_busy_buffers_size   512k;
        proxy_buffers   4 512k;
        proxy_buffer_size   256k;
        large_client_header_buffers 4 16k;

        # Increase timeout to allow for large requests
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;

        # Mime types
        include /etc/nginx/mime.types;
        

        # Frontend with auth
        location / {

            error_page 401 = /oauth2/sign_in?rd=$scheme://$host$request_uri;
            
            auth_request_set $user  $upstream_http_x_auth_request_user;
            auth_request_set $token  $upstream_http_x_auth_request_access_token;
            auth_request_set $auth_cookie $upstream_http_set_cookie;

            proxy_set_header X-User  $user;
            proxy_set_header X-Access-Token $token;
            add_header Set-Cookie $auth_cookie;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Server $host;
            proxy_set_header X-Forwarded-Proto $scheme;
            auth_request /oauth2/auth;

            # Redirect to the frontend when auth request is successful
            set $upstream http://idapt-frontend:3000;
            proxy_pass $upstream;
        }

        
        # Backend with auth
        location /api/ {
            # Allow upload of large files up to 500GB
            client_max_body_size 500G;

            error_page 401 = /oauth2/sign_in?rd=$scheme://$host$request_uri;
            auth_request_set $user  $upstream_http_x_auth_request_user;
            auth_request_set $token  $upstream_http_x_auth_request_access_token;
            auth_request_set $auth_cookie $upstream_http_set_cookie;
            proxy_set_header X-User  $user;
            proxy_set_header X-Access-Token $token;
            add_header Set-Cookie $auth_cookie;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Server $host;
            proxy_set_header X-Forwarded-Proto $scheme;
            auth_request /oauth2/auth;
        
            # Disable buffering for the backend
            proxy_buffering off;

            # Proxy to the backend
            set $upstream http://idapt-backend:8000;
            proxy_pass $upstream;
        }


        # Keycloak
        location /auth/realms {
            include /etc/nginx/kc-proxy-set-headers.conf;
            proxy_set_header X-Auth-Request-Redirect $request_uri;
            set $upstream http://idapt-keycloak:8080;
            proxy_pass $upstream;
        }

        location /auth/resources {
            include /etc/nginx/kc-proxy-set-headers.conf;
            proxy_set_header X-Auth-Request-Redirect $request_uri;
            set $upstream http://idapt-keycloak:8080;
            proxy_pass $upstream;
        }

        location /auth/js {
            include /etc/nginx/kc-proxy-set-headers.conf;
            proxy_set_header X-Auth-Request-Redirect $request_uri;
            set $upstream http://idapt-keycloak:8080;
            proxy_pass $upstream;
        }

        # Not recommended to be exposed as said in https://www.keycloak.org/server/reverseproxy (Exposed Path Recommendations)
        # But since the user should be an admin and be able to modify every setting he wants, we use the master realm and admin endpoint for him.
        location /auth/admin {
            include /etc/nginx/kc-proxy-set-headers.conf;
            proxy_set_header X-Auth-Request-Redirect $request_uri;
            set $upstream http://idapt-keycloak:8080;
            proxy_pass $upstream;
        }


        # OAuth2 proxy
        location /oauth2 {
            expires -1;
            proxy_set_header Host       $host;
            proxy_set_header X-Real-IP  $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Auth-Request-Redirect $request_uri;
            
            # Using upstream variable here causes a redirect issue ending in 502. Using the fixed url instead.
            proxy_pass http://idapt-oauth2-proxy:4180;
        }

        location = /oauth2/sign_out {
            expires -1;
            proxy_set_header Host       $host;
            proxy_set_header X-Real-IP  $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Auth-Request-Redirect /oauth2/sign_in;

            # Using upstream variable here causes a redirect issue ending in 502. Using the fixed url instead.
            proxy_pass http://idapt-oauth2-proxy:4180;
        }
    }
}