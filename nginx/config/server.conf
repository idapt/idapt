# Redirect all http requests to https except for the certbot challenge
server {
    listen 80;
    server_name $HOST_DOMAIN; # Catch all requests to this machine on port 80

    # ACME challenge location for Let's Encrypt
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    # Redirect all http requests to https
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# HTTPS server
server {

    # Enable HTTP/2
    http2 on;
    
    listen 443 ssl;
    # Catch all requests to this machine on port 443
    server_name $HOST_DOMAIN;

    # SSL configuration
    ssl_certificate /etc/letsencrypt/live/$HOST_DOMAIN/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$HOST_DOMAIN/privkey.pem;
    #ssl_trusted_certificate /etc/letsencrypt/live/$HOST_DOMAIN/fullchain.pem;

    # SSL parameters
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    add_header Strict-Transport-Security "max-age=31536000" always;

    # Handle errors
    proxy_intercept_errors on;

    # Security headers
    add_header X-Frame-Options SAMEORIGIN;
    add_header X-XSS-Protection "1; mode=block";

    # Proxy buffer settings
    proxy_busy_buffers_size   512k;
    proxy_buffers   4 512k;
    proxy_buffer_size   256k;
    large_client_header_buffers 4 16k;

    # Increase timeout to allow for large requests
    proxy_connect_timeout 300s;
    proxy_send_timeout 300s;
    proxy_read_timeout 300s;

    # Mime types
    include /etc/nginx/mime.types;
    

    # Frontend
    location / {

        proxy_set_header    Host               $host;
        proxy_set_header    X-Real-IP          $remote_addr;
        proxy_set_header    X-Forwarded-For    $proxy_add_x_forwarded_for;
        proxy_set_header    X-Forwarded-Host   $host;
        proxy_set_header    X-Forwarded-Server $host;
        proxy_set_header    X-Forwarded-Port   $server_port;
        proxy_set_header    X-Forwarded-Proto  $scheme;

        # Serve static files from the frontend
        root /usr/share/nginx/html;
        try_files $uri $uri.html $uri/index.html /index.html;

        # Cache static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            expires 30d;
            add_header Cache-Control "public, no-transform";
        }
    }

    
    # Backend
    location /api/ {

        # SSL Passthrough specific settings
        proxy_ssl_server_name on;
        proxy_ssl_protocols TLSv1.2 TLSv1.3;
        proxy_ssl_verify off;  # If you want to verify backend cert, set to on and configure proxy_ssl_trusted_certificate

        # Allow upload of large files up to 500GB
        client_max_body_size 500G;

        proxy_set_header    Host               $host;
        proxy_set_header    X-Real-IP          $remote_addr;
        proxy_set_header    X-Forwarded-For    $proxy_add_x_forwarded_for;
        proxy_set_header    X-Forwarded-Host   $host;
        proxy_set_header    X-Forwarded-Server $host;
        proxy_set_header    X-Forwarded-Port   $server_port;
        proxy_set_header    X-Forwarded-Proto  $scheme;

        # Add these headers for WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade"; 

        # Disable buffering for the backend
        proxy_buffering off;
        
        # Docker resolver
        resolver 127.0.0.11 valid=30s;
        
        # Proxy to the backend using HTTPS
        set $upstream https://idapt-backend:8000;
        proxy_pass $upstream;
    }
}
