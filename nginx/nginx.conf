http {
    include /etc/nginx/mime.types;

    # Rate limiting
    #limit_req_zone $binary_remote_addr zone=root_limit:10m rate=10r/s;
    #limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
    #limit_req_zone $binary_remote_addr #zone=ollama_limit:10m rate=5r/s;

    # Include the map ollama host configuration created at nginx startup, either the default one or the one sucessfully got from the backend.
    include /etc/nginx/ollama_host.conf;

    server {
        listen 3030;
        server_name localhost;

        # Development server proxy
        location / {
            # Only allow local access
            #allow 127.0.0.1;
            #deny all;

            # Rate limiting
            #limit_req zone=root_limit burst=10 nodelay;

            # Docker DNS resolver
            resolver 127.0.0.11 ipv6=off;

            # Use variable to force re resolution on call and not wait for container to start
            set $upstream "http://idapt-frontend:3000";
            proxy_pass $upstream;

            proxy_http_version 1.1; 
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;

            # Set a consistent origin for all requests
            #proxy_set_header Origin "http://idapt-nginx:3030";
        }

        # Proxy /api requests to the backend
        location /api/ {
            # Allow frontend container 
            # TODO : Need to implement host firewall here but allow requests made by the user browser when running on client requests to the api.
            #allow 172.22.0.15; # Frontend container IP
            #deny all;

            # Rate limiting
            #limit_req zone=api_limit burst=20 nodelay;

            # Docker DNS resolver
            resolver 127.0.0.11 ipv6=off;

            # Allow upload of large files up to 500GB
            client_max_body_size 500G;


            # Use variable to force re resolution on call and not wait for container to start
            set $upstream "http://idapt-backend:8000";
            proxy_pass $upstream; 

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;

            # Set a consistent origin for all requests
            #proxy_set_header Origin "http://idapt-nginx:3030";
        }

        # Endpoint to set ollama host
        location /set-ollama-host {
            # Only allow access from backend container
            allow 172.21.0.15; # Backend container IP
            deny all;

            if ($request_method = POST) {
                set $ollama_target_host $request_body;
                return 200 "Ollama host set to: $ollama_target_host";
            }
            return 405;
        }

        # Proxy /ollama requests to the custom ollama host
        #location /ollama/ { # TODO : Fix this and make it work with the custom ollama host variable.
        #    # Only allow access from backend container
        #    allow 172.21.0.15; # Backend container IP
        #    deny all;
        #

            # Increase timeouts for long-running requests
        #    proxy_connect_timeout 30s;
        #    proxy_send_timeout 300s;
        #    proxy_read_timeout 300s;
            
            # Set headers for SSE
        #    proxy_set_header Connection 'keep-alive';
        #    proxy_set_header Cache-Control 'no-cache';
        #    proxy_set_header Content-Type 'text/event-stream';


            #rewrite /ollama/(.*) /$1 break;
            #proxy_pass http://$upstreamm/$1$is_args$args;
        #    proxy_pass http://$host$uri;
            
            # Docker DNS resolver
        #    resolver 127.0.0.11 ipv6=off;

            #Test 1
            #rewrite ^/ollama/(.*) /$1 break;
            #proxy_pass $ollama_target_host;
            #Test 2
            #return 200 "host is : $ollama_target_host";        
            #Test 3
            #Rewrite the path to remove /ollama/
            # Remove location prefix and construct full URL
            #set $upstream "http://host.docker.internal:11434/";
            #rewrite ^/ollama/(.*) /$1 break;
            #proxy_pass $upstream; 
            
        #}

        location /integrated-ollama/ {
            # Only allow access from backend container
            #allow 172.21.0.15; # Backend container IP
            #deny all;

            # Docker DNS resolver
            resolver 127.0.0.11 ipv6=off;

            # Remove the trailing slash from upstream and add $request_uri
            set $upstream "http://idapt-ollama:11434";
            # Rewrite the path to remove /integrated-ollama/
            rewrite ^/integrated-ollama/(.*) /$1 break;
            proxy_pass $upstream;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;


        }

        # Temporary # TODO : Remove this once the custom ollama host is working.
        location /local-ollama/ {
            # Only allow access from backend container
            allow 172.21.0.15; # Backend container IP
            deny all;

            # Docker DNS resolver
            resolver 127.0.0.11 ipv6=off;

            proxy_pass http://host.docker.internal:11434/; # Used for now as using $custom_ollama_host as variable into proxy_pass does not work and gives a 502 error.
        }


        #location /postgres/ { # Not working for now, seems to have issue with the connection string and sql alchemy.
        #    # Only allow access from backend container
        #    allow 172.21.0.15; # Backend container IP
        #    deny all;
        #
        #    # Docker DNS resolver
        #    resolver 127.0.0.11 ipv6=off;
        #
        #    # Use variable to force re resolution on call and not wait for container to start
        #    # Use uri to keep url database connection string
        #    set $upstream idapt-postgres;
        #    proxy_pass $upstream; 
        #}

        location /health {
            return 200 "OK";
        }


    }
}

events {
    worker_connections 1024;
}
