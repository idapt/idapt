name: idapt_dev
services:

  # Integrated Ollama instance
  idapt-ollama:
    container_name: idapt-ollama
    image: ollama/ollama:latest
    expose:
      - "11434"
    networks:
      idapt-ollama-external-network: {}
      idapt-ollama-network: {}
    runtime: nvidia # Remove this if you don't want to use GPU for ollama.
    deploy: # Remove this if you don't want to use GPU for ollama.
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: ["gpu"]
              count: all
    # Removed for dev to not clutter the logs.
    #healthcheck: # Causes issues when pulling large models or when api is busy for a long time.
    #  test: ["CMD", "ollama", "--version"]  # Check if Ollama is responding
    #  interval: 1s                    # Run the health check every 2 seconds
    #  timeout: 5s                     # Timeout for the health check is 30 seconds
    #  retries: 30                       # Retry 5 times before marking it as unhealthy
    volumes:
      - ./ollama_data:/root/.ollama # Store the models in dev folder so that we don't download them again at each rebuild
    restart: always
    # Container security hardening
    security_opt:
      - no-new-privileges:true
    #cap_drop: # TODO
    #  - ALL



  # The backend is the main service of the application.
  idapt-backend:
    build:
      context: ./backend
      dockerfile: dev.Dockerfile 
    container_name: idapt-backend
    expose:
      - "8000"
    networks:
      idapt-backend-external-network: {}
      idapt-backend-network: {}
      idapt-ollama-network: {}
    depends_on:
      idapt-ollama:
        condition: service_started # Removed for dev to not clutter the logs.
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 1s
      timeout: 5s
      retries: 30
    environment:
      ENVIRONMENT: dev
      HOST_DOMAIN: ${HOST_DOMAIN}
    env_file:
      - ./backend/.env
    volumes:
      - ./backend:/backend # Use a bind mount to sync the backend code with the container and allow code changes to be synced.
      - backend_data:/backend_data # The volume where the app data is stored.
      - idapt_data:/data # The volume where the data is stored. Use data mount name to make it shorter.
    restart: always
    # Container security hardening
    security_opt:
      - no-new-privileges:true
    #cap_drop: # TODO
    #  - ALL



  idapt-frontend:
    build:
      context: ./frontend
      dockerfile: dev.Dockerfile
    container_name: idapt-frontend
    expose:
      - "3000"
    networks:
      idapt-frontend-external-network: {}
      idapt-frontend-network: {}
    #depends_on:     # Disable for dev to have a faster startup time, backend will simply not respond at frontend start.
      #idapt-backend:
      #  condition: service_healthy
    environment:
      ENVIRONMENT: dev
      NEXT_PUBLIC_HOST_DOMAIN: ${HOST_DOMAIN}
    env_file:
      - ./frontend/.env
    volumes:
      - ./frontend:/frontend # Use a bind mount to sync the frontend code with the container and allow code changes to be synced.
    restart: always
    # Container security hardening
    user: node
    security_opt:
      - no-new-privileges:true
    #cap_drop: # TODO
    #  - ALL




# Nginx to manage every communication between containers and outside world.
  idapt-nginx:
    container_name: idapt-nginx
    build:
      context: ./nginx
      dockerfile: ./dev.Dockerfile
    environment:
      # Entrypoint script variables
      HOST_DOMAIN: ${HOST_DOMAIN}
      # Container variables
      CERTBOT_EMAIL: ${CERTBOT_EMAIL}
      USE_LOCAL_CA: 1 # For dev we use a local CA to avoid harrasing letsencrypt.
    env_file:
      - ./nginx/.env
    ports:
      # Expose the nginx listening ports through the host firewall.
      # Add 127.0.0.1 to only open ports locally and not through the host firewall.
      - '80:80/tcp'
      - '443:443/tcp'
      - '443:443/udp'
    # Nginx has access to every container exposed via their own network for routing.
    networks:
      idapt-nginx-external-network: {}
      idapt-frontend-network: {}
      idapt-backend-network: {}
    volumes:
      - nginx_letsencrypt:/etc/letsencrypt
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 1s
      timeout: 5s
      retries: 30
    restart: always
    # Container security hardening
    security_opt:
      - no-new-privileges:true
    #cap_drop: # TODO
    #  - ALL
    #cap_add:
    #  - NET_BIND_SERVICE  # Only for nginx



volumes:
  backend_data:
  idapt_data:
  #ollama_data: # TODO use a shared read only volume for ollama models to not have duplicates for each pod.
  nginx_letsencrypt:



# One network for each service to keep them isolated.
networks:
  # Dedicated external networks for services that need internet access
  idapt-nginx-external-network:
    attachable: false
    name: idapt-nginx-external-network
    driver: bridge
  idapt-frontend-external-network:
    attachable: false
    name: idapt-frontend-external-network
    driver: bridge
  idapt-backend-external-network:
    attachable: false
    name: idapt-backend-external-network
    driver: bridge
  idapt-ollama-external-network:
    attachable: false
    name: idapt-ollama-external-network
    driver: bridge
  # Internal networks for inter container communication.
  idapt-backend-network:
    internal: true
    attachable: false
    name: idapt-backend-network
    driver: bridge
  idapt-frontend-network:
    internal: true
    attachable: false
    name: idapt-frontend-network
    driver: bridge
  idapt-ollama-network:
    internal: true
    attachable: false
    name: idapt-ollama-network
    driver: bridge