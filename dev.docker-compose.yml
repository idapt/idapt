name: idapt_dev
services:

  # Integrated Ollama instance
  idapt-ollama:
    container_name: idapt-ollama
    image: ollama/ollama:latest
    expose:
      - "11434"
    networks:
      idapt-ollama-network:
        ipv4_address: 172.23.0.15
    runtime: nvidia # Remove this if you don't want to use GPU for ollama.
    deploy: # Remove this if you don't want to use GPU for ollama.
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: ["gpu"]
              count: all
    #healthcheck: # Causes issues when pulling large models or when api is busy for a long time.
    #  test: ["CMD", "curl", "-f", "http://localhost:11434"]
    #  interval: 1s
    #  timeout: 5s
    #  retries: 30
    volumes:
      - ollama_data:/root/.ollama # Store the models in a volume so that we don't download them again at each rebuild
    security_opt:
      - no-new-privileges:true
    restart: always



  idapt-postgres:
    image: postgres:latest
    container_name: idapt-postgres
    build:
      context: ./postgres
      dockerfile: ./Dockerfile
    ports:
      - "5432:5432"
    expose:
      - "5432"
    networks:
      idapt-postgres-network:
        ipv4_address: 172.24.0.15
    volumes:
      - postgres_data:/var/lib/postgresql/data # Store the database data in a volume
    env_file:
      - ./postgres/.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h localhost || exit 1"]
      interval: 1s
      timeout: 5s
      retries: 30
    security_opt:
      - no-new-privileges:true
    restart: always



  # The backend is the main service of the application.
  idapt-backend:
    build:
      context: ./backend
      dockerfile: dev.Dockerfile 
    container_name: idapt-backend
    expose:
      - "8000"
    networks:
      idapt-backend-network:
        ipv4_address: 172.21.0.15
      idapt-postgres-network: # Temporarily access database container directly # TODO Use nginx
        ipv4_address: 172.24.0.14
    depends_on:
      idapt-postgres:
        condition: service_healthy
      #idapt-ollama:
      #  condition: service_started
      idapt-nginx:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 1s
      timeout: 5s
      retries: 30
    env_file:
      - ./postgres/.env # Used to get the default superuser password and other variables.
      - ./backend/.env
      - ./dev.env # To pass the dev variable.
    volumes:
      - ./backend:/backend # Use a bind mount to sync the backend code with the container and allow code changes to be synced.
      - idapt_data:/idapt_data # The volume where the data is stored.
    security_opt:
      - no-new-privileges:true
    restart: always



  idapt-frontend:
    build:
      context: ./frontend
      dockerfile: dev.Dockerfile
    container_name: idapt-frontend
    expose:
      - "3000"
    networks:
      idapt-frontend-network:
        ipv4_address: 172.22.0.15
    #depends_on:
      #idapt-backend:
      #  condition: service_healthy
    env_file:
      - ./frontend/.env
      - ./dev.env # To pass the dev variable.
    volumes:
      - ./frontend:/frontend # Use a bind mount to sync the frontend code with the container and allow code changes to be synced.
    security_opt:
      - no-new-privileges:true
    restart: always



# Nginx to manage every communication between containers and also outside world.
  idapt-nginx:
    image: nginx:alpine
    container_name: idapt-nginx
    ports:
      - "3030:3030" # Expose the port 3030. The security of this is done at the nginx configuration. As ngix is a proxy, it can secure the access to the app. # TODO : Update this to use 127.0.0.1 ? This way it don't open the port on the host machine firewall ?
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 1s
      timeout: 5s
      retries: 30
    volumes:
      - ./nginx/nginx.dev.conf:/etc/nginx/nginx.conf:ro # Bind mount to reflect changes of the conf file in the containe
      - ./nginx/docker-entrypoint.sh:/docker-entrypoint.sh:ro
    # Nginx has access to every container via their own network for routing.
    entrypoint: ["/docker-entrypoint.sh"]
    networks:
      - idapt-frontend-network
      - idapt-backend-network
      - idapt-ollama-network
      - idapt-postgres-network
    extra_hosts: # Expose the host machine to the nginx container at host.docker.internal to be able to reach the ollama custom host if it is running on the host machine.
      - "host.docker.internal:host-gateway"
    security_opt:
      - no-new-privileges:true
    restart: always


volumes:
  postgres_data:
  ollama_data:
  idapt_data:


# One network for each service to keep them isolated and routed through nginx. Each network has its own subnet ip range. Each container is assigned a static ip address on its network to control origins at th nginx level.
networks:
  idapt-backend-network:
    attachable: false
    name: idapt-backend-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
  idapt-frontend-network:
    attachable: false
    name: idapt-frontend-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16
  idapt-ollama-network:
    attachable: false
    name: idapt-ollama-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.23.0.0/16
  idapt-postgres-network:
    attachable: false
    name: idapt-postgres-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.24.0.0/16
