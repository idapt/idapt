name: idapt_dev

services:

  # The backend is the main service of the application.
  idapt-backend:
    build:
      context: ./backend
      dockerfile: dev.Dockerfile 
    container_name: idapt-backend
    ports:
      - "8000:8000"
    networks:
      idapt-network: {}
    # Expose the host.docker.internal so that we can access ollama runnning on the localost from the container.
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 1s
      timeout: 5s
      retries: 30
    environment:
      ENVIRONMENT: dev
      DEPLOYMENT_TYPE: self-hosted
      HOST_DOMAIN: ${HOST_DOMAIN}
    volumes:
      - ./backend:/backend # Use a bind mount to sync the backend code with the container and allow code changes to be synced.
      - ./user-data:/data # The volume where the data is stored. Use data mount name to make it shorter.
      - ./backend-certs:/certs # Used for ssl termination.
    restart: unless-stopped
    # Container security hardening
    security_opt:
      - no-new-privileges:true
    #cap_drop: # TODO
    #  - ALL

  idapt-frontend:
    build:
      context: ./frontend
      dockerfile: dev.Dockerfile
    container_name: idapt-frontend
    expose:
      - "3000"
    networks:
      idapt-network: {}
    #depends_on:     # Disable for dev to have a faster startup time, backend will simply not respond at frontend start.
      #idapt-backend:
      #  condition: service_healthy
    environment:
      ENVIRONMENT: dev
      DEPLOYMENT_TYPE: self-hosted
      NEXT_TELEMETRY_DISABLED: 1 # For nextjs
      ANONYMIZED_TELEMETRY: False # For chromadb
    volumes:
      - ./frontend:/frontend # Use a bind mount to sync the frontend code with the container and allow code changes to be synced.
    restart: unless-stopped
    # Container security hardening
    user: node
    security_opt:
      - no-new-privileges:true
    #cap_drop: # TODO
    #  - ALL

# Nginx to manage every communication between containers and outside world.
  idapt-nginx:
    container_name: idapt-nginx
    build:
      context: ./nginx
      dockerfile: ./dev.Dockerfile
    environment:
      ENVIRONMENT: dev
      DEPLOYMENT_TYPE: self-hosted
      HOST_DOMAIN: ${HOST_DOMAIN}
    ports:
      # Expose the nginx listening ports through the host firewall.
      # Add 127.0.0.1 to only open ports locally and not through the host firewall.
      - '80:80'
      - '443:443'
    # Nginx has access to every container exposed via their own network for routing.
    networks:
      idapt-network: {}
    volumes:
      - ./frontend-certs:/etc/letsencrypt # Needed to store, share and generate the certs
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 1s
      timeout: 5s
      retries: 30
    restart: unless-stopped
    # Container security hardening
    security_opt:
      - no-new-privileges:true
    #cap_drop: # TODO
    #  - ALL
    #cap_add:
    #  - NET_BIND_SERVICE  # Only for nginx

# One network for each service to keep them isolated.
networks:
  # Dedicated external networks for services that need internet access
  idapt-network:
    attachable: false
    name: idapt-network
    driver: bridge